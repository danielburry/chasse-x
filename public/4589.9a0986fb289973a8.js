"use strict";var mt=Object.defineProperty,vt=Object.defineProperties,pt=Object.getOwnPropertyDescriptors,ke=Object.getOwnPropertySymbols,gt=Object.prototype.hasOwnProperty,ht=Object.prototype.propertyIsEnumerable,Xe=(he,ne,m)=>ne in he?mt(he,ne,{enumerable:!0,configurable:!0,writable:!0,value:m}):he[ne]=m,Ue=(he,ne)=>{for(var m in ne||(ne={}))gt.call(ne,m)&&Xe(he,m,ne[m]);if(ke)for(var m of ke(ne))ht.call(ne,m)&&Xe(he,m,ne[m]);return he},Qe=(he,ne)=>vt(he,pt(ne));(self.webpackChunkchasse_pwa_front=self.webpackChunkchasse_pwa_front||[]).push([[4589],{67709:(he,ne,m)=>{function oe(){return new Float32Array(4)}function I(H,x,M,F){const R=new Float32Array(4);return R[0]=H,R[1]=x,R[2]=M,R[3]=F,R}function te(){return oe()}function t(){return I(1,1,1,1)}function K(){return I(1,0,0,0)}function j(){return I(0,1,0,0)}function w(){return I(0,0,1,0)}function z(){return I(0,0,0,1)}m.d(ne,{f:()=>I});const le=te(),se=t(),de=K(),A=j(),E=w(),ae=z();Object.freeze(Object.defineProperty({__proto__:null,create:oe,clone:function y(H){const x=new Float32Array(4);return x[0]=H[0],x[1]=H[1],x[2]=H[2],x[3]=H[3],x},fromValues:I,createView:function ce(H,x){return new Float32Array(H,x,4)},zeros:te,ones:t,unitX:K,unitY:j,unitZ:w,unitW:z,ZEROS:le,ONES:se,UNIT_X:de,UNIT_Y:A,UNIT_Z:E,UNIT_W:ae},Symbol.toStringTag,{value:"Module"}))},51434:(he,ne,m)=>{m.d(ne,{U:()=>ut});var oe=m(18717),y=m(62208),I=m(9769),ce=m(50392),te=m(62856),t=m(67969),K=m(38982),w=m(15765),z=m(39351);const le={nearest:{defines:[],samplingMode:t.cw.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:t.cw.LINEAR,mips:!1},bicubic:{defines:["bicubic"],samplingMode:t.cw.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:t.cw.LINEAR_MIPMAP_LINEAR,mips:!0}};var A=m(67709),E=m(64288),ae=m(11176),N=m(94299),R=m(4619),B=m(39406),me=m(18716);class ve extends te.Z{constructor(){super(...arguments),this._computeDesc=new Map}prepareState({context:e},_,i){i&&i.includes("hittest")?e.setBlendFunctionSeparate(t.zi.ONE,t.zi.ONE,t.zi.ONE,t.zi.ONE):e.setBlendFunctionSeparate(t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA,t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA),e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(t.wb.EQUAL,_.stencilRef,255)}draw(e,_,i){const p=this.getGeometryType();_.commit(e);const d=_.getGeometry(p);(0,y.Wi)(d)||(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),d.forEachCommand(v=>{const g=me.m2.load(v.materialKey).symbologyType;this.supportsSymbology(g)&&this.drawGeometry(e,_,v,i)}))}_setSharedUniforms(e,_,i){const{displayLevel:p,pixelRatio:d,state:v,passOptions:g}=_;(0,y.pC)(g)&&"hittest"===g.type&&(e.setUniform2fv("u_hittestPos",g.position),e.setUniform1f("u_hittestDist",g.distance)),e.setUniform1f("u_pixelRatio",d),e.setUniformMatrix3fv("u_tileMat3",i.transforms.tileMat3),e.setUniformMatrix3fv("u_viewMat3",v.viewMat3),e.setUniformMatrix3fv("u_dvsMat3",i.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",v.displayViewMat3),e.setUniform1f("u_currentZoom",Math.round(p*z.MI)),e.setUniform1i("u_attributeTextureSize",_.attributeView.size),e.setUniform1i("u_attributeData0",z.iJ),e.setUniform1i("u_attributeData1",z.nM),e.setUniform1i("u_attributeData2",z.Ij),e.setUniform1i("u_attributeData3",z.f2),e.setUniform1i("u_attributeData4",z.By),e.setUniform1i("u_attributeData5",z.mx)}_setSizeVVUniforms(e,_,i,p){if(e.vvSizeMinMaxValue&&_.setUniform4fv("u_vvSizeMinMaxValue",i.vvSizeMinMaxValue),e.vvSizeScaleStops&&_.setUniform1f("u_vvSizeScaleStopsValue",i.vvSizeScaleStopsValue),e.vvSizeFieldStops){const d=i.getSizeVVFieldStops(p.key.level);_.setUniform1fv("u_vvSizeFieldStopsValues",d.values),_.setUniform1fv("u_vvSizeFieldStopsSizes",d.sizes)}e.vvSizeUnitValue&&_.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",i.vvSizeUnitValueToPixelsRatio)}_setColorAndOpacityVVUniforms(e,_,i){e.vvColor&&(_.setUniform1fv("u_vvColorValues",i.vvColorValues),_.setUniform4fv("u_vvColors",i.vvColors)),e.vvOpacity&&(_.setUniform1fv("u_vvOpacityValues",i.vvOpacityValues),_.setUniform1fv("u_vvOpacities",i.vvOpacities))}_setRotationVVUniforms(e,_,i){e.vvRotation&&_.setUniform1f("u_vvRotationType","geographic"===i.vvMaterialParameters.vvRotationType?0:1)}_getTriangleDesc(e,_,i=["a_pos"]){const p=_.bufferLayouts.geometry,d=i.map(h=>p.findIndex(T=>T.name===h)),v=`${e}-${d.join("-")}`;let g=this._computeDesc.get(v);if(!g){const h=_.strides,T=_.strides.geometry,C=new Map(_.attributes),S=p.map(L=>Ue({},L)),D=Math.max(..._.attributes.values()),P={geometry:S};let ie=0;for(const L of d){const V=p[L];P.geometry.push({count:V.count,name:V.name+"1",divisor:V.divisor,normalized:V.normalized,offset:T+V.offset,stride:T,type:V.type}),P.geometry.push({count:V.count,name:V.name+"2",divisor:V.divisor,normalized:V.normalized,offset:2*T+V.offset,stride:T,type:V.type}),C.set(V.name+"1",D+ ++ie),C.set(V.name+"2",D+ ++ie)}g={bufferLayouts:P,attributes:C,strides:h},this._computeDesc.set(v,g)}return g}}var xe=m(37409);class Ie extends ve{dispose(){}getGeometryType(){return B.LW.FILL}supportsSymbology(e){return e!==B.mD.DOT_DENSITY}drawGeometry(e,_,i,p){const{context:d,painter:v,rendererInfo:g,requiredLevel:h,passOptions:T,requestRender:C}=e,S=me.dk.load(i.materialKey),D=(0,xe.a1)(S.data),P=(0,y.pC)(T)&&"hittest"===T.type,ie=v.materialManager,{shader:L,vertexLayout:V,hittestAttributes:G}=(0,y.Pt)(D.programSpec,function Ae(pe){const e={geometry:[{location:0,name:"a_pos",count:2,type:t.g.SHORT},{location:1,name:"a_id",count:3,type:t.g.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:t.g.UNSIGNED_BYTE},{location:3,name:"a_color",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_aux1",count:4,type:t.g.UNSIGNED_SHORT},{location:5,name:"a_aux2",count:4,type:t.g.SHORT},{location:6,name:"a_aux3",count:4,type:t.g.UNSIGNED_BYTE},{location:7,name:"a_zoomRange",count:2,type:t.g.UNSIGNED_SHORT}]};switch(pe.symbologyType){case B.mD.SIMPLE:case B.mD.OUTLINE_FILL_SIMPLE:e.geometry.splice(7,1),e.geometry.splice(4,1)}return{shader:"materials/fill",vertexLayout:e}}(S));let J=t.MX.TRIANGLES,$=(0,E.cM)(S.data,V);P&&($=this._getTriangleDesc(i.materialKey,$,G),J=t.MX.POINTS);const{attributes:q,bufferLayouts:W}=$,U=ie.getMaterialProgram(e,S,L,q,p);if((0,y.pC)(C)&&!P&&!U.isCompiled)return void C();d.useProgram(U),this._setSharedUniforms(U,e,_),U.setUniform2f("u_tileOffset",512*_.key.col,512*_.key.row),S.textureBinding&&(v.textureManager.bindTextures(d,U,S),U.setUniform1f("u_zoomFactor",1/2**(h-_.key.level)));const Y=1/e.pixelRatio;U.setUniform1f("u_blur",Y),U.setUniform1f("u_antialiasing",Y),this._setSizeVVUniforms(S,U,g,_),this._setColorAndOpacityVVUniforms(S,U,g);const Z=i.target.getVAO(d,W,q,P);let ee=i.indexCount,k=i.indexFrom*Uint32Array.BYTES_PER_ELEMENT;P&&(ee/=3,k/=3),d.bindVAO(Z),this._drawFills(e,_,U,J,ee,k)}_drawFills(e,_,i,p,d,v){e.context.drawElements(p,d,t.g.UNSIGNED_INT,v)}}var ge=m(83994),b=m(85775),O=m(49266),X=m(55086),Q=m(49353),ue=m(63290);const ye={shader:"materials/icon",vertexLayout:{geometry:[{location:0,name:"a_pos",count:2,type:t.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:t.g.SHORT},{location:2,name:"a_texCoords",count:2,type:t.g.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:t.g.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:t.g.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:t.g.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:t.g.UNSIGNED_SHORT}]},hittestAttributes:["a_vertexOffset","a_texCoords"]};class Ce extends ve{dispose(){}getGeometryType(){return B.LW.MARKER}supportsSymbology(e){return e!==B.mD.HEATMAP&&e!==B.mD.PIE_CHART}drawGeometry(e,_,i,p){const{context:d,painter:v,rendererInfo:g,state:h,passOptions:T,requestRender:C}=e,S=me.mE.load(i.materialKey),D=(0,xe.a1)(S.data),P=(0,y.pC)(T)&&"hittest"===T.type,{shader:ie,vertexLayout:L,hittestAttributes:V}=(0,y.Pt)(D.programSpec,ye);let G=t.MX.TRIANGLES,J=(0,E.cM)(S.data,L);P&&(J=this._getTriangleDesc(i.materialKey,J,V),G=t.MX.POINTS);const{attributes:$,bufferLayouts:q}=J,W=v.materialManager.getMaterialProgram(e,S,ie,$,p);if((0,y.pC)(C)&&!P&&!W.isCompiled)return void C();d.useProgram(W),S.textureBinding&&v.textureManager.bindTextures(d,W,S,!0),this._setSharedUniforms(W,e,_),W.setUniformMatrix3fv("u_displayMat3",S.vvRotation?h.displayViewMat3:h.displayMat3),this._setSizeVVUniforms(S,W,g,_),this._setColorAndOpacityVVUniforms(S,W,g),this._setRotationVVUniforms(S,W,g);const Y=i.target.getVAO(d,q,$,P);let Z=i.indexCount,ee=i.indexFrom*Uint32Array.BYTES_PER_ELEMENT;P&&(Z/=3,ee/=3),d.bindVAO(Y),this._drawMarkers(e,_,W,G,Z,ee,P),d.bindVAO(null)}_drawMarkers(e,_,i,p,d,v,g){e.context.drawElements(p,d,t.g.UNSIGNED_INT,v)}}var Oe=m(57596);const De=ue.Z.getLogger("esri.views.2d.engine.webgl.brushes.WGLBrushHeatmap"),Je={vsPath:"heatmap/heatmapResolve",fsPath:"heatmap/heatmapResolve",attributes:new Map([["a_position",0]])};var qe=m(29384),tt=m(13382),Fe=m(21286),nt=m(49966),ze=m(5254);var Ee=m(1268);const Be=1/65536;var Ye=m(9545),He=m(47132),Ze=m(43289);const ut={marker:Ce,line:class st extends ve{dispose(){}getGeometryType(){return B.LW.LINE}supportsSymbology(e){return!0}drawGeometry(e,_,i,p){const{context:d,painter:v,rendererInfo:g,displayLevel:h,passOptions:T,requestRender:C}=e,S=me.a.load(i.materialKey),D=(0,y.pC)(T)&&"hittest"===T.type;let P=(0,E.cM)(S.data,{geometry:[{location:0,name:"a_pos",count:2,type:t.g.SHORT},{location:1,name:"a_id",count:4,type:t.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:t.g.BYTE},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:t.g.UNSIGNED_SHORT},{location:5,name:"a_tlbr",count:4,type:t.g.UNSIGNED_SHORT},{location:6,name:"a_segmentDirection",count:4,type:t.g.BYTE},{location:7,name:"a_aux",count:2,type:t.g.UNSIGNED_SHORT},{location:8,name:"a_zoomRange",count:2,type:t.g.UNSIGNED_SHORT}]}),ie=t.MX.TRIANGLES;D&&(P=this._getTriangleDesc(i.materialKey,P),ie=t.MX.POINTS);const{attributes:L,bufferLayouts:V}=P,G=v.materialManager.getMaterialProgram(e,S,"materials/line",L,p);if((0,y.pC)(C)&&!D&&!G.isCompiled)return void C();const J=1/e.pixelRatio;d.useProgram(G),this._setSharedUniforms(G,e,_),S.textureBinding&&v.textureManager.bindTextures(d,G,S),G.setUniform1f("u_zoomFactor",2**(h-_.key.level)),G.setUniform1f("u_blur",0+J),G.setUniform1f("u_antialiasing",J),this._setSizeVVUniforms(S,G,g,_),this._setColorAndOpacityVVUniforms(S,G,g),d.setFaceCullingEnabled(!1);const W=i.target.getVAO(d,V,L,D);let U=i.indexCount,Y=i.indexFrom*Uint32Array.BYTES_PER_ELEMENT;D&&(U/=3,Y/=3),d.bindVAO(W),d.drawElements(ie,U,t.g.UNSIGNED_INT,Y)}},fill:Ie,text:class ct extends ve{dispose(){}getGeometryType(){return B.LW.TEXT}supportsSymbology(e){return!0}drawGeometry(e,_,i,p){const{context:d,painter:v,rendererInfo:g,state:h,passOptions:T,requestRender:C}=e,S=me.qr.load(i.materialKey),D=(0,y.pC)(T)&&"hittest"===T.type,{bufferLayouts:P,attributes:ie}=(0,E.cM)(S.data,{geometry:[{location:0,name:"a_pos",count:2,type:t.g.SHORT},{location:1,name:"a_id",count:4,type:t.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:t.g.UNSIGNED_BYTE},{location:5,name:"a_aux",count:4,type:t.g.BYTE},{location:6,name:"a_zoomRange",count:2,type:t.g.UNSIGNED_SHORT},{location:7,name:"a_vertexOffset",count:2,type:t.g.SHORT},{location:8,name:"a_texCoords",count:2,type:t.g.UNSIGNED_SHORT}]}),L=v.materialManager.getMaterialProgram(e,S,"materials/text",ie,p);if((0,y.pC)(C)&&!D&&!L.isCompiled)return void C();d.useProgram(L);let V=t.MX.TRIANGLES;D&&(V=t.MX.POINTS),this._setSharedUniforms(L,e,_),v.textureManager.bindTextures(d,L,S),L.setUniformMatrix3fv("u_displayMat3",h.displayMat3),L.setUniformMatrix3fv("u_displayViewMat3",h.displayViewMat3),this._setSizeVVUniforms(S,L,g,_),this._setColorAndOpacityVVUniforms(S,L,g),this._setRotationVVUniforms(S,L,g),L.setUniform1f("u_isHalo",1);const G=i.target.getVAO(d,P,ie),J=i.indexFrom*Uint32Array.BYTES_PER_ELEMENT;d.bindVAO(G),d.drawElements(t.MX.TRIANGLES,i.indexCount,t.g.UNSIGNED_INT,J),L.setUniform1f("u_isHalo",0),d.drawElements(V,i.indexCount,t.g.UNSIGNED_INT,J)}},label:class at extends ve{dispose(){}getGeometryType(){return B.LW.LABEL}supportsSymbology(e){return!0}drawGeometry(e,_,i,p){const{context:d,painter:v,state:g,rendererInfo:h,passOptions:T,requestRender:C}=e,S=me.Gq.load(i.materialKey),D=(0,y.pC)(T)&&"hittest"===T.type,P=S.mapAligned?1:0;if(!P&&Math.abs(_.key.level-Math.round(100*e.displayLevel)/100)>=1)return;const{bufferLayouts:ie,attributes:L}=(0,E.cM)(S.data,{geometry:[{location:0,name:"a_pos",count:2,type:t.g.SHORT},{location:1,name:"a_id",count:4,type:t.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:t.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:t.g.UNSIGNED_BYTE},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:t.g.UNSIGNED_BYTE},{location:6,name:"a_glyphData",count:4,type:t.g.UNSIGNED_BYTE},{location:7,name:"a_vertexOffset",count:2,type:t.g.SHORT},{location:8,name:"a_texCoords",count:2,type:t.g.UNSIGNED_SHORT}]}),V=v.materialManager.getMaterialProgram(e,S,"materials/label",L,p);if((0,y.pC)(C)&&!D&&!V.isCompiled)return void C();e.context.setStencilFunction(t.wb.EQUAL,0,255),d.useProgram(V),this._setSharedUniforms(V,e,_),v.textureManager.bindTextures(d,V,S);const G=1===P?g.displayViewMat3:g.displayMat3;this._setSizeVVUniforms(S,V,h,_),V.setUniform1f("u_mapRotation",Math.floor(g.rotation/360*254)),V.setUniform1f("u_mapAligned",P),V.setUniformMatrix3fv("u_displayMat3",G),V.setUniform1f("u_opacity",1),V.setUniform2fv("u_screenSize",e.state.size),V.setUniform1f("u_isHalo",1);const J=i.target.getVAO(d,ie,L),$=i.indexFrom*Uint32Array.BYTES_PER_ELEMENT;d.bindVAO(J),d.drawElements(t.MX.TRIANGLES,i.indexCount,t.g.UNSIGNED_INT,$),V.setUniform1f("u_isHalo",0),d.drawElements(t.MX.TRIANGLES,i.indexCount,t.g.UNSIGNED_INT,$),d.setStencilTestEnabled(!0),d.setBlendingEnabled(!0)}},clip:class x extends te.Z{constructor(){super(...arguments),this._color=(0,A.f)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(t.xS.KEEP,t.xS.KEEP,t.xS.REPLACE),e.setStencilWriteMask(255),e.setStencilFunction(t.wb.ALWAYS,0,255)}draw(e,_){const{context:i,state:p,requestRender:d}=e,v=(0,E.cM)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:t.g.SHORT}]}),g=_.getVAO(i,p,v.attributes,v.bufferLayouts);(0,y.Wi)(g.indexBuffer)||(this._program||(this._program=(0,N.H)(i,ae.O)),!(0,y.pC)(d)||this._program.isCompiled?(i.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",p.displayMat3),i.bindVAO(g),i.drawElements(t.MX.TRIANGLES,g.indexBuffer.size,t.g.UNSIGNED_INT,0),i.bindVAO()):d())}},stencil:tt.Z,bitmap:class de extends te.Z{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_pos",0]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},_){e.setBlendingEnabled(!0),"additive"===_.blendFunction?e.setBlendFunctionSeparate(t.zi.ONE,t.zi.ONE,t.zi.ONE,t.zi.ONE):e.setBlendFunctionSeparate(t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA,t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(t.wb.EQUAL,_.stencilRef,255)}draw(e,_){const{context:i,renderingOptions:p,painter:d,requestRender:v}=e;if(!_.source)return;const g=((pe,e,_)=>{if("dynamic"===_.samplingMode){const{state:i}=pe,p=e.resolution/e.pixelRatio/i.resolution,d=Math.round(pe.pixelRatio)!==pe.pixelRatio,v=p>1.05||p<.95;return i.rotation||v||d||e.isSourceScaled||e.rotation?le.bilinear:le.nearest}return le[_.samplingMode]})(e,_,p),h=d.materialManager.getProgram(this._desc,g.defines);if((0,y.pC)(v)&&!h.isCompiled)return void v();e.timeline.begin(this.name),this._quad||(this._quad=new ce.Z(i,[0,0,1,0,0,1,1,1]));const{coordScale:T,computedOpacity:C,transforms:S}=_;_.setSamplingProfile(g),_.bind(e.context,z.Ic),i.useProgram(h),h.setUniformMatrix3fv("u_dvsMat3",S.dvs),h.setUniform1i("u_texture",z.Ic),h.setUniform2fv("u_coordScale",T),h.setUniform1f("u_opacity",C),this._quad.draw(),e.timeline.end(this.name)}},overlay:class F extends te.Z{constructor(){super(...arguments),this._desc={vsPath:"overlay/overlay",fsPath:"overlay/overlay",attributes:new Map([["a_pos",0],["a_uv",1]])}}dispose(){}prepareState({context:e}){e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setBlendFunctionSeparate(t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA,t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(t.wb.GREATER,255,255)}draw(e,_){const{context:i,painter:p,requestRender:d}=e;if(!_.isReady)return;const{computedOpacity:v,dvsMat3:g,isWrapAround:h,texture:T}=_;e.timeline.begin(this.name);const C=p.materialManager.getProgram(this._desc);if((0,y.pC)(d)&&!C.isCompiled)return void d();const S=(0,E.cM)("overlay",{geometry:[{location:0,name:"a_pos",count:2,type:t.g.FLOAT}],tex:[{location:1,name:"a_uv",count:2,type:t.g.UNSIGNED_SHORT}]}),D=_.getVAO(i,S.bufferLayouts,S.attributes);D&&(i.bindVAO(D),i.useProgram(C),i.bindTexture(T,z.Ic),C.setUniformMatrix3fv("u_dvsMat3",g),C.setUniform1i("u_texture",z.Ic),C.setUniform1f("u_opacity",v),i.drawArrays(t.MX.TRIANGLE_STRIP,0,h?10:4),i.bindVAO(),e.timeline.end(this.name))}},raster:class j extends te.Z{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},_){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA,t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(t.wb.EQUAL,_.stencilRef,255)}draw(e,_){var C;if(!(0,I.qE)(_)||_.suspended)return;const{timeline:i,context:p,painter:d,requestRender:v}=e;i.begin(this.name);const g=!(null==(C=p.capabilities.textureFloat)?void 0:C.textureFloatLinear);_.updateTexture(e);const h=this._getShaderVariations(_,g),T=d.materialManager.getProgram(this._desc[_.symbolizerParameters.type],h);this._drawWithProgram(p,T,_,v),i.end(this.name)}_drawWithProgram(e,_,i,p,d=1,v=[0,0],g=!1){if(this._quad||(this._quad=new ce.Z(e,[0,0,1,0,0,1,1,1])),(0,y.pC)(p)&&!_.isCompiled)return void p();const{symbolizerParameters:h,transformGrid:T,width:C,height:S,opacity:D}=i,P=h.type;e.useProgram(_);const ie=this._getShaderVariations(i),L=this._getUniformInfos(P,e,_,ie),{names:V,textures:G}=i.getTextures();(0,K.RA)(e,_,V,G);const J=(0,K.zS)(d,v),$=(0,K.Tc)(T,[C,S],[i.source.width,i.source.height],D,g);if((0,K.N9)(_,L,Ue(Ue({u_coordScale:i.coordScale,u_dvsMat3:i.transforms.dvs},J),$)),h.colormap){const{colormap:q,colormapOffset:W}=h,U=(0,K.Ue)(q,W);(0,K.N9)(_,L,U)}if("stretch"===h.type){const q=(0,K.xW)(h);(0,K.N9)(_,L,q)}else if("hillshade"===h.type){const q=(0,K.Fm)(h);(0,K.N9)(_,L,q)}this._quad.draw()}_getUniformInfos(e,_,i,p){const d=p.length>0?e+"-"+p.join("-"):e;if(this._rendererUniformInfos.has(d))return this._rendererUniformInfos.get(d);const v=(0,K.v)(_,i);return this._rendererUniformInfos.set(d,v),v}_getShaderVariations(e,_=!1){const i=[],{interpolation:p}=e,{type:d,colormap:v}=e.symbolizerParameters;return"cubic"===p?i.push("bicubic"):"bilinear"===p&&"stretch"===d&&null!=v?(i.push("bilinear"),i.push("nnedge")):_&&"bilinear"===p&&i.push("bilinear"),e.isRendereredSource?i.push("noop"):v&&i.push("applyColormap"),e.transformGrid&&(i.push("applyProjection"),1===e.transformGrid.spacing[0]&&i.push("lookupProjection")),i}},rasterVF:w.Z,flow:oe.Z,tileInfo:qe.Z,vtlBackground:class Ve extends te.Z{constructor(){super(...arguments),this._color=(0,A.f)(1,0,0,1),this._patternMatrix=(0,nt.c)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,_){const{context:i,painter:p,styleLayerUID:d,requestRender:v}=e;this._loadWGLResources(e);const g=e.displayLevel,h=e.styleLayer,T=h.backgroundMaterial,C=p.vectorTilesMaterialManager,S=h.getPaintValue("background-color",g),D=h.getPaintValue("background-opacity",g),P=h.getPaintValue("background-pattern",g),ie=void 0!==P,L=S[3]*D,V=1|window.devicePixelRatio,G=e.spriteMosaic;let J,$;const q=V>z.a?2:1,W=e.drawPhase===B.jx.HITTEST,U=this._programOptions;U.id=W,U.pattern=ie;const Y=C.getMaterialProgram(i,T,U);if(!(0,y.pC)(v)||W||Y.isCompiled){if(i.bindVAO(this._vao),i.useProgram(Y),ie){const Z=G.getMosaicItemPosition(P,!0);if((0,y.pC)(Z)){const{tl:ee,br:k,page:fe}=Z;J=k[0]-ee[0],$=k[1]-ee[1];const _e=G.getPageSize(fe);(0,y.pC)(_e)&&(G.bind(i,t.cw.LINEAR,fe,z.V4),Y.setUniform4f("u_tlbr",ee[0],ee[1],k[0],k[1]),Y.setUniform2fv("u_mosaicSize",_e),Y.setUniform1i("u_texture",z.V4))}Y.setUniform1f("u_opacity",D)}else this._color[0]=L*S[0],this._color[1]=L*S[1],this._color[2]=L*S[2],this._color[3]=L,Y.setUniform4fv("u_color",this._color);if(Y.setUniform1f("u_depth",h.z||0),W){const Z=(0,ze.Au)(d+1);Y.setUniform4fv("u_id",Z)}for(const Z of _){if(Y.setUniform1f("u_coord_range",Z.rangeX),Y.setUniformMatrix3fv("u_dvsMat3",Z.transforms.dvs),ie){const ee=Math.max(2**(Math.round(g)-Z.key.level),1),k=q*Z.width*ee,fe=k/(0,Fe.fp)(J),_e=k/(0,Fe.fp)($);this._patternMatrix[0]=fe,this._patternMatrix[4]=_e,Y.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}i.setStencilFunction(t.wb.EQUAL,Z.stencilRef,255),i.drawArrays(t.MX.TRIANGLE_STRIP,0,4)}}else v()}_loadWGLResources(e){if(this._vao)return;const{context:_,styleLayer:i}=e,p=i.backgroundMaterial,d=new Int8Array([0,0,1,0,0,1,1,1]),v=ge.f.createVertex(_,t.l1.STATIC_DRAW,d),g=new Q.U(_,p.getAttributeLocations(),p.getLayoutInfo(),{geometry:v});this._vao=g}},vtlFill:class Ge extends te.Z{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(e,_){const{displayLevel:i,drawPhase:p,renderPass:d,spriteMosaic:v,styleLayerUID:g}=e;let h=!1;for(const W of _)if(W.layerData.has(g)){const U=W.layerData.get(g);if(U.fillIndexCount>0||U.outlineIndexCount>0){h=!0;break}}if(!h)return;const T=e.styleLayer,C=T.getPaintProperty("fill-pattern"),S=void 0!==C,D=S&&C.isDataDriven;let P;if(S&&!D){const W=C.getValue(i);P=v.getMosaicItemPosition(W,!0)}const ie=!S&&T.getPaintValue("fill-antialias",i);let G,L=!0,V=1;if(!S){const W=T.getPaintProperty("fill-color"),U=T.getPaintProperty("fill-opacity");if(!(null==W?void 0:W.isDataDriven)&&!(null==U?void 0:U.isDataDriven)){const Y=T.getPaintValue("fill-color",i);V=T.getPaintValue("fill-opacity",i)*Y[3],V>=1&&(L=!1)}}if(L&&"opaque"===d)return;p===B.jx.HITTEST&&(G=(0,ze.Au)(g+1));const J=T.getPaintValue("fill-translate",i),$=T.getPaintValue("fill-translate-anchor",i);(L||"translucent"!==d)&&this._drawFill(e,g,T,_,J,$,S,P,D,G),ie&&"opaque"!==d&&!(!T.hasDataDrivenOutlineColor&&T.outlineUsesFillColor&&V<1)&&this._drawOutline(e,g,T,_,J,$,G)}_drawFill(e,_,i,p,d,v,g,h,T,C){if(g&&!T&&(0,y.Wi)(h))return;const{context:S,displayLevel:D,state:P,drawPhase:ie,painter:L,pixelRatio:V,spriteMosaic:G,requestRender:J}=e,$=i.fillMaterial,q=L.vectorTilesMaterialManager,W=V>z.a?2:1,U=ie===B.jx.HITTEST,Y=this._fillProgramOptions;Y.id=U,Y.pattern=g;const Z=q.getMaterialProgram(S,$,Y);if((0,y.pC)(J)&&!U&&!Z.isCompiled)return void J();if(S.useProgram(Z),(0,y.pC)(h)){const{page:k}=h,fe=G.getPageSize(k);(0,y.pC)(fe)&&(G.bind(S,t.cw.LINEAR,k,z.V4),Z.setUniform2fv("u_mosaicSize",fe),Z.setUniform1i("u_texture",z.V4))}Z.setUniformMatrix3fv("u_displayMat3",v===Ee.fD.VIEWPORT?P.displayMat3:P.displayViewMat3),Z.setUniform2fv("u_fillTranslation",d),Z.setUniform1f("u_depth",i.z+Be),U&&Z.setUniform4fv("u_id",C);let ee=-1;for(const k of p){if(!k.layerData.has(_))continue;k.key.level!==ee&&(ee=k.key.level,$.setDataUniforms(Z,D,i,ee,G));const fe=k.layerData.get(_);if(!fe.fillIndexCount)continue;fe.prepareForRendering(S);const _e=fe.fillVertexArrayObject;if(!(0,y.Wi)(_e)){if(S.bindVAO(_e),Z.setUniformMatrix3fv("u_dvsMat3",k.transforms.dvs),S.setStencilFunction(t.wb.EQUAL,k.stencilRef,255),g){const be=Math.max(2**(Math.round(D)-k.key.level),1);Z.setUniform1f("u_patternFactor",k.rangeX/(W*k.width*be))}if(T){const be=fe.patternMap;if(!be)continue;for(const[Se,Me]of be){const Le=G.getPageSize(Se);(0,y.pC)(Le)&&(G.bind(S,t.cw.LINEAR,Se,z.V4),Z.setUniform2fv("u_mosaicSize",Le),Z.setUniform1i("u_texture",z.V4),S.drawElements(t.MX.TRIANGLES,Me[1],t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Me[0]))}}else S.drawElements(t.MX.TRIANGLES,fe.fillIndexCount,t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*fe.fillIndexStart);k.triangleCount+=fe.fillIndexCount/3}}}_drawOutline(e,_,i,p,d,v,g){const{context:h,displayLevel:T,state:C,drawPhase:S,painter:D,pixelRatio:P,spriteMosaic:ie,requestRender:L}=e,V=i.outlineMaterial,G=D.vectorTilesMaterialManager,J=.75/P,$=S===B.jx.HITTEST,q=this._outlineProgramOptions;q.id=$;const W=G.getMaterialProgram(h,V,q);if((0,y.pC)(L)&&!$&&!W.isCompiled)return void L();h.useProgram(W),W.setUniformMatrix3fv("u_displayMat3",v===Ee.fD.VIEWPORT?C.displayMat3:C.displayViewMat3),W.setUniform2fv("u_fillTranslation",d),W.setUniform1f("u_depth",i.z+Be),W.setUniform1f("u_outline_width",J),$&&W.setUniform4fv("u_id",g);let U=-1;for(const Y of p){if(!Y.layerData.has(_))continue;Y.key.level!==U&&(U=Y.key.level,V.setDataUniforms(W,T,i,U,ie));const Z=Y.layerData.get(_);if(Z.prepareForRendering(h),!Z.outlineIndexCount)continue;const ee=Z.outlineVertexArrayObject;(0,y.Wi)(ee)||(h.bindVAO(ee),W.setUniformMatrix3fv("u_dvsMat3",Y.transforms.dvs),h.setStencilFunction(t.wb.EQUAL,Y.stencilRef,255),h.drawElements(t.MX.TRIANGLES,Z.outlineIndexCount,t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Z.outlineIndexStart),Y.triangleCount+=Z.outlineIndexCount/3)}}},vtlLine:class We extends te.Z{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(e,_){const{context:i,displayLevel:p,state:d,drawPhase:v,painter:g,pixelRatio:h,spriteMosaic:T,styleLayerUID:C,requestRender:S}=e;if(!_.some(_e=>{var be,Se;return null!=(Se=null==(be=_e.layerData.get(C))?void 0:be.lineIndexCount)&&Se}))return;const D=e.styleLayer,P=D.lineMaterial,ie=g.vectorTilesMaterialManager,L=D.getPaintValue("line-translate",p),V=D.getPaintValue("line-translate-anchor",p),G=D.getPaintProperty("line-pattern"),J=void 0!==G,$=J&&G.isDataDriven;let q,W;if(J&&!$){const _e=G.getValue(p);q=T.getMosaicItemPosition(_e)}let U=!1;if(!J){const _e=D.getPaintProperty("line-dasharray");if(W=void 0!==_e,U=W&&_e.isDataDriven,W&&!U){const be=_e.getValue(p),Se=D.getDashKey(be,D.getLayoutValue("line-cap",p));q=T.getMosaicItemPosition(Se)}}const Y=1/h,Z=v===B.jx.HITTEST,ee=this._programOptions;ee.id=Z,ee.pattern=J,ee.sdf=W;const k=ie.getMaterialProgram(i,P,ee);if((0,y.pC)(S)&&!Z&&!k.isCompiled)return void S();if(i.useProgram(k),k.setUniformMatrix3fv("u_displayViewMat3",d.displayViewMat3),k.setUniformMatrix3fv("u_displayMat3",V===Ee.fD.VIEWPORT?d.displayMat3:d.displayViewMat3),k.setUniform2fv("u_lineTranslation",L),k.setUniform1f("u_depth",D.z),k.setUniform1f("u_antialiasing",Y),Z){const _e=(0,ze.Au)(C+1);k.setUniform4fv("u_id",_e)}if(q&&(0,y.pC)(q)){const{page:_e}=q,be=T.getPageSize(_e);(0,y.pC)(be)&&(T.bind(i,t.cw.LINEAR,_e,z.V4),k.setUniform2fv("u_mosaicSize",be),k.setUniform1i("u_texture",z.V4))}let fe=-1;for(const _e of _){if(!_e.layerData.has(C))continue;_e.key.level!==fe&&(fe=_e.key.level,P.setDataUniforms(k,p,D,fe,T)),k.setUniform1f("u_zoomFactor",2**(p-fe)/h);const Se=_e.layerData.get(C);if(!Se.lineIndexCount)continue;Se.prepareForRendering(i);const Me=Se.lineVertexArrayObject;if(!(0,y.Wi)(Me)){if(i.bindVAO(Me),k.setUniformMatrix3fv("u_dvsMat3",_e.transforms.dvs),i.setStencilFunction(t.wb.EQUAL,_e.stencilRef,255),$||U){const Le=Se.patternMap;if(!Le)continue;for(const[Ne,Te]of Le){const Re=T.getPageSize(Ne);(0,y.pC)(Re)&&(T.bind(i,t.cw.LINEAR,Ne,z.V4),k.setUniform2fv("u_mosaicSize",Re),k.setUniform1i("u_texture",z.V4),i.drawElements(t.MX.TRIANGLES,Te[1],t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Te[0]))}}else i.drawElements(t.MX.TRIANGLES,Se.lineIndexCount,t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Se.lineIndexStart);_e.triangleCount+=Se.lineIndexCount/3}}}},vtlCircle:class we extends te.Z{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(e,_){const{context:i,displayLevel:p,requiredLevel:d,state:v,drawPhase:g,painter:h,spriteMosaic:T,styleLayerUID:C,requestRender:S}=e;if(!_.some(U=>{var Y,Z;return null!=(Z=null==(Y=U.layerData.get(C))?void 0:Y.circleIndexCount)&&Z}))return;const D=e.styleLayer,P=D.circleMaterial,ie=h.vectorTilesMaterialManager,V=D.getPaintValue("circle-translate",p),G=D.getPaintValue("circle-translate-anchor",p),J=g===B.jx.HITTEST,$=this._programOptions;$.id=J;const q=ie.getMaterialProgram(i,P,$);if(!J&&(0,y.pC)(S)&&!q.isCompiled)return void S();i.useProgram(q),q.setUniformMatrix3fv("u_displayMat3",G===Ee.fD.VIEWPORT?v.displayMat3:v.displayViewMat3),q.setUniform2fv("u_circleTranslation",V),q.setUniform1f("u_depth",D.z),q.setUniform1f("u_antialiasingWidth",1.2);let W=-1;if(J){const U=(0,ze.Au)(C+1);q.setUniform4fv("u_id",U)}for(const U of _){if(!U.layerData.has(C))continue;U.key.level!==W&&(W=U.key.level,P.setDataUniforms(q,p,D,W,T));const Y=U.layerData.get(C);if(!Y.circleIndexCount)continue;Y.prepareForRendering(i);const Z=Y.circleVertexArrayObject;(0,y.Wi)(Z)||(i.bindVAO(Z),q.setUniformMatrix3fv("u_dvsMat3",U.transforms.dvs),d!==U.key.level?i.setStencilFunction(t.wb.EQUAL,U.stencilRef,255):i.setStencilFunction(t.wb.GREATER,255,255),i.drawElements(t.MX.TRIANGLES,Y.circleIndexCount,t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*Y.circleIndexStart),U.triangleCount+=Y.circleIndexCount/3)}}},vtlSymbol:class je extends te.Z{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=(0,Ye.c)()}dispose(){}drawMany(e,_){const{drawPhase:i,styleLayerUID:p}=e,d=e.styleLayer;let v;i===B.jx.HITTEST&&(v=(0,ze.Au)(p+1)),this._drawIcons(e,d,_,v),this._drawText(e,d,_,v)}_drawIcons(e,_,i,p){const{context:d,displayLevel:v,drawPhase:g,painter:h,spriteMosaic:T,state:C,styleLayerUID:S,requestRender:D}=e,P=_.iconMaterial,ie=h.vectorTilesMaterialManager;let L,V=!1;for(const fe of i)if(fe.layerData.has(S)&&(L=fe.layerData.get(S),L.iconPerPageElementsMap.size>0)){V=!0;break}if(!V)return;const G=_.getPaintValue("icon-translate",v),J=_.getPaintValue("icon-translate-anchor",v);let $=_.getLayoutValue("icon-rotation-alignment",v);$===Ee.aF.AUTO&&($=_.getLayoutValue("symbol-placement",v)===Ee.R.POINT?Ee.aF.VIEWPORT:Ee.aF.MAP);const q=$===Ee.aF.MAP,W=_.getLayoutValue("icon-keep-upright",v)&&q,U=L.isIconSDF,Y=g===B.jx.HITTEST,Z=this._iconProgramOptions;Z.id=Y,Z.sdf=U;const ee=ie.getMaterialProgram(d,P,Z);if((0,y.pC)(D)&&!Y&&!ee.isCompiled)return void D();d.useProgram(ee),ee.setUniformMatrix3fv("u_displayViewMat3",$===Ee.aF.MAP?C.displayViewMat3:C.displayMat3),ee.setUniformMatrix3fv("u_displayMat3",J===Ee.fD.VIEWPORT?C.displayMat3:C.displayViewMat3),ee.setUniform2fv("u_iconTranslation",G),ee.setUniform1f("u_depth",_.z),ee.setUniform1f("u_mapRotation",(0,Ze.s5)(C.rotation)),ee.setUniform1f("u_keepUpright",W?1:0),ee.setUniform1f("u_level",10*v),ee.setUniform1i("u_texture",z.V4),ee.setUniform1f("u_fadeDuration",He.nN/1e3),Y&&ee.setUniform4fv("u_id",p);let k=-1;for(const fe of i){if(!fe.layerData.has(S)||(fe.key.level!==k&&(k=fe.key.level,P.setDataUniforms(ee,v,_,k,T)),L=fe.layerData.get(S),0===L.iconPerPageElementsMap.size))continue;L.prepareForRendering(d),L.updateOpacityInfo();const _e=L.iconVertexArrayObject;if(!(0,y.Wi)(_e)){d.bindVAO(_e),ee.setUniformMatrix3fv("u_dvsMat3",fe.transforms.dvs),ee.setUniform1f("u_time",(performance.now()-L.lastOpacityUpdate)/1e3);for(const[be,Se]of L.iconPerPageElementsMap)this._renderIconRange(e,ee,Se,be,fe)}}}_renderIconRange(e,_,i,p,d){const{context:v,spriteMosaic:g}=e;this._spritesTextureSize[0]=g.getWidth(p)/4,this._spritesTextureSize[1]=g.getHeight(p)/4,_.setUniform2fv("u_mosaicSize",this._spritesTextureSize),g.bind(v,t.cw.LINEAR,p,z.V4),v.setStencilTestEnabled(!0),v.setStencilFunction(t.wb.GREATER,255,255),v.setStencilWriteMask(0),v.drawElements(t.MX.TRIANGLES,i[1],t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i[0]),d.triangleCount+=i[1]/3}_drawText(e,_,i,p){const{context:d,displayLevel:v,drawPhase:g,glyphMosaic:h,painter:T,pixelRatio:C,spriteMosaic:S,state:D,styleLayerUID:P,requestRender:ie}=e,L=_.textMaterial,V=T.vectorTilesMaterialManager;let G,J=!1;for(const Pe of i)if(Pe.layerData.has(P)&&(G=Pe.layerData.get(P),G.glyphPerPageElementsMap.size>0)){J=!0;break}if(!J)return;const $=_.getPaintProperty("text-opacity");if($&&!$.isDataDriven&&0===$.getValue(v))return;const q=_.getPaintProperty("text-color"),W=!q||q.isDataDriven||q.getValue(v)[3]>0,U=_.getPaintProperty("text-halo-width"),Y=_.getPaintProperty("text-halo-color"),Z=(!U||U.isDataDriven||U.getValue(v)>0)&&(!Y||Y.isDataDriven||Y.getValue(v)[3]>0);if(!W&&!Z)return;let k=_.getLayoutValue("text-rotation-alignment",v);k===Ee.aF.AUTO&&(k=_.getLayoutValue("symbol-placement",v)===Ee.R.POINT?Ee.aF.VIEWPORT:Ee.aF.MAP);const fe=k===Ee.aF.MAP,_e=_.getLayoutValue("text-keep-upright",v)&&fe,be=g===B.jx.HITTEST,Se=.8*3/C;this._glyphTextureSize||(this._glyphTextureSize=(0,Ye.f)(h.width/4,h.height/4));const Me=_.getPaintValue("text-translate",v),Le=_.getPaintValue("text-translate-anchor",v),Ne=this._sdfProgramOptions;Ne.id=be;const Te=V.getMaterialProgram(d,L,Ne);if((0,y.pC)(ie)&&!be&&!Te.isCompiled)return void ie();d.useProgram(Te),Te.setUniformMatrix3fv("u_displayViewMat3",k===Ee.aF.MAP?D.displayViewMat3:D.displayMat3),Te.setUniformMatrix3fv("u_displayMat3",Le===Ee.fD.VIEWPORT?D.displayMat3:D.displayViewMat3),Te.setUniform2fv("u_textTranslation",Me),Te.setUniform1f("u_depth",_.z+152587890625e-16),Te.setUniform2fv("u_mosaicSize",this._glyphTextureSize),Te.setUniform1f("u_mapRotation",(0,Ze.s5)(D.rotation)),Te.setUniform1f("u_keepUpright",_e?1:0),Te.setUniform1f("u_level",10*v),Te.setUniform1i("u_texture",z.CU),Te.setUniform1f("u_antialiasingWidth",Se),Te.setUniform1f("u_fadeDuration",He.nN/1e3),be&&Te.setUniform4fv("u_id",p);let Re=-1;for(const Pe of i){if(!Pe.layerData.has(P)||(Pe.key.level!==Re&&(Re=Pe.key.level,L.setDataUniforms(Te,v,_,Re,S)),G=Pe.layerData.get(P),0===G.glyphPerPageElementsMap.size))continue;G.prepareForRendering(d),G.updateOpacityInfo();const Ke=G.textVertexArrayObject;if((0,y.Wi)(Ke))continue;d.bindVAO(Ke),Te.setUniformMatrix3fv("u_dvsMat3",Pe.transforms.dvs),d.setStencilTestEnabled(!0),d.setStencilFunction(t.wb.GREATER,255,255),d.setStencilWriteMask(0);const ft=(performance.now()-G.lastOpacityUpdate)/1e3;Te.setUniform1f("u_time",ft),G.glyphPerPageElementsMap.forEach((_t,dt)=>{this._renderGlyphRange(d,_t,dt,h,Te,Z,W,Pe)})}}_renderGlyphRange(e,_,i,p,d,v,g,h){p.bind(e,t.cw.LINEAR,i,z.CU),v&&(d.setUniform1f("u_halo",1),e.drawElements(t.MX.TRIANGLES,_[1],t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*_[0]),h.triangleCount+=_[1]/3),g&&(d.setUniform1f("u_halo",0),e.drawElements(t.MX.TRIANGLES,_[1],t.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*_[0]),h.triangleCount+=_[1]/3)}},dotDensity:class re extends Ie{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([z.kF,z.yP]),this._dotVAO=null,this._dotDesc={vsPath:"dot/dot",fsPath:"dot/dot",attributes:new Map([["a_pos",0]])}}dispose(){super.dispose(),this._disposeTextures(),this._dotFBO=(0,y.O3)(this._dotFBO),this._dotVAO=(0,y.O3)(this._dotVAO)}getGeometryType(){return B.LW.FILL}supportsSymbology(e){return e===B.mD.DOT_DENSITY}_drawFills(e,_,i,p,d,v){const{passOptions:g}=e;if((0,y.pC)(g)&&"hittest"===g.type)super._drawFills(e,_,i,p,d,v);else{const h=this._drawDotLocations(e,_,i,d,v);this._drawDotDensity(e,_,h)}}_drawDotDensity(e,_,i){const{context:p,painter:d,rendererInfo:v,requestRender:g}=e,h=d.materialManager.getProgram(this._dotDesc);if((0,y.pC)(g)&&!h.isCompiled)return void g();const{rendererSchema:T}=v;(0,xe.t4)(T,"dot-density");const C=this._createDotDensityMesh(p,this._dotDesc.attributes,{geometry:[{name:"a_pos",count:2,type:t.g.SHORT,divisor:0,normalized:!1,offset:0,stride:4}]});p.setStencilTestEnabled(!0),p.useProgram(h),h.setUniform1f("u_tileZoomFactor",1),h.setUniform1i("u_texture",this._dotSamplers[0]),h.setUniform1f("u_dotSize",Math.max(T.dotSize,1)),h.setUniform1f("u_pixelRatio",window.devicePixelRatio),this._setSharedUniforms(h,e,_),p.bindTexture(i,this._dotSamplers[0]),p.bindVAO(C),p.drawArrays(t.MX.POINTS,0,262144)}_drawDotLocations(e,_,i,p,d){const{context:v,rendererInfo:g,requiredLevel:h}=e,T=v.getViewport(),{rendererSchema:C}=g;(0,xe.t4)(C,"dot-density");const{dotScale:S,colors:D,activeDots:P,backgroundColor:ie,dotValue:L}=C;v.setViewport(0,0,512,512);const V=v.getBoundFramebufferObject(),G=this._createFBO(v);v.bindFramebuffer(G),v.setClearColor(0,0,0,0),v.clear(v.gl.COLOR_BUFFER_BIT|v.gl.STENCIL_BUFFER_BIT),v.setStencilTestEnabled(!1);const J=1/2**(h-_.key.level),$=z.I_,q=$*window.devicePixelRatio*$*window.devicePixelRatio,W=1/J*(1/J),U=S?e.state.scale/S:1;return i.setUniform1f("u_tileZoomFactor",J),i.setUniform1f("u_tileDotsOverArea",q/(z.I_*window.devicePixelRatio*z.I_*window.devicePixelRatio)),i.setUniformMatrix4fv("u_dotColors",D),i.setUniform4fv("u_isActive",P),i.setUniform4fv("u_dotBackgroundColor",ie),i.setUniform1f("u_dotValue",Math.max(1,L*U*W)),this._bindDotDensityTextures(v,i,g,$),v.drawElements(t.MX.TRIANGLES,p,t.g.UNSIGNED_INT,d),v.setViewport(T.x,T.y,T.width,T.height),v.bindFramebuffer(V),G.colorTexture}_createFBO(e){if((0,y.Wi)(this._dotFBO)){const p={target:t.No.TEXTURE_2D,pixelFormat:t.VI.RGBA,dataType:t.Br.UNSIGNED_BYTE,samplingMode:t.cw.NEAREST,wrapMode:t.e8.CLAMP_TO_EDGE,width:512,height:512},d={colorTarget:t.Lm.TEXTURE,depthStencilTarget:t.OU.DEPTH_STENCIL_RENDER_BUFFER},v=new O.r(e,{width:512,height:512,internalFormat:t.Tg.DEPTH_STENCIL});this._dotFBO=new b.X(e,d,p,v)}return this._dotFBO}_disposeTextures(){if(this._dotTextures){for(let e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,_,i,p){const{rendererSchema:d}=i;(0,xe.t4)(d,"dot-density");const v=this._createDotDensityTextures(e,p,d.seed);_.setUniform1iv("u_dotTextures",this._dotSamplers);for(let g=0;g<v.length;g++)e.bindTexture(v[g],this._dotSamplers[g])}_createDotDensityMesh(e,_,i){if((0,y.Wi)(this._dotVAO)){const d=new Int16Array(524288);for(let g=0;g<512;g++)for(let h=0;h<512;h++)d[2*(h+512*g)]=h,d[2*(h+512*g)+1]=g;const v=ge.f.createVertex(e,t.l1.STATIC_DRAW,d);this._dotVAO=new Q.U(e,_,i,{geometry:v},null)}return this._dotVAO}_createDotDensityTextures(e,_,i){if(this._dotTextureSize===_&&this._seed===i||(this._disposeTextures(),this._dotTextureSize=_,this._seed=i),null===this._dotTextures){const p=new R.Z(i);this._dotTextures=[this._allocDotDensityTexture(e,_,p),this._allocDotDensityTexture(e,_,p)]}return this._dotTextures}_allocDotDensityTexture(e,_,i){const p=new Float32Array(_*_*4);for(let d=0;d<p.length;d++)p[d]=i.getFloat();return new X.x(e,{wrapMode:t.e8.REPEAT,pixelFormat:t.VI.RGBA,dataType:t.Br.FLOAT,samplingMode:t.cw.NEAREST,width:_,height:_},p)}},heatmap:class $e extends Ce{supportsSymbology(e){return e===B.mD.HEATMAP}dispose(){super.dispose(),this._accumulateOutputTexture=(0,y.O3)(this._accumulateOutputTexture),this._accumulateFramebuffer=(0,y.O3)(this._accumulateFramebuffer),this._resolveGradientTexture=(0,y.O3)(this._resolveGradientTexture),this._tileQuad=(0,y.O3)(this._tileQuad)}drawGeometry(e,_,i,p){const{defines:d}=this._loadQualityProfile(e.context);super.drawGeometry(e,_,i,p?[...p,...d]:d)}_drawMarkers(e,_,i,p,d,v,g){const{context:h}=e,T=h.getBoundFramebufferObject(),C=h.getViewport();this._prepareAccumulatePass(e,_,i,g),h.drawElements(p,d,t.g.UNSIGNED_INT,v),g||this._drawResolvePass(e,_,T,C)}_prepareAccumulatePass(e,_,i,p){const{context:d,rendererInfo:v,state:g,displayLevel:h}=e,{rendererSchema:T}=v;(0,xe.t4)(T,"heatmap");const{referenceScale:C,radius:S,isFieldActive:D}=T;this._loadResources(d),this._updateResources(T),i.setUniform1f("u_radius",S*(0!==C?C/g.scale:1)*2**(_.key.level-h)),p||(d.bindFramebuffer(this._accumulateFramebuffer),i.setUniform1f("u_isFieldActive",D),d.setViewport(0,0,this._accumulateFramebuffer.width,this._accumulateFramebuffer.height),d.setBlendingEnabled(!0),d.setBlendFunction(t.zi.ONE,t.zi.ONE),d.setClearColor(0,0,0,0),d.clear(t.lk.COLOR_BUFFER_BIT))}_drawResolvePass(e,_,i,p){const{context:d,painter:v,rendererInfo:g}=e,{rendererSchema:h}=g;(0,xe.t4)(h,"heatmap");const{radius:T,minDensity:C,densityRange:S}=h,{defines:D}=this._loadQualityProfile(d),P=v.materialManager.getProgram(Je,D);d.useProgram(P),this._setSharedUniforms(P,e,_),d.bindFramebuffer(i),d.setViewport(0,0,p.width,p.height),d.setBlendFunction(t.zi.ONE,t.zi.ONE_MINUS_SRC_ALPHA),d.bindTexture(this._accumulateOutputTexture,8),d.bindTexture(this._resolveGradientTexture,9),P.setUniform1i("u_texture",8),P.setUniform1i("u_gradient",9),P.setUniform2f("u_densityMinAndInvRange",C,1/S),P.setUniform1f("u_densityNormalization",3/(T*T*Math.PI)),this._tileQuad.draw()}_loadResources(e){const _=e.type===Oe.zO.WEBGL2,{dataType:i,samplingMode:p,shadingRate:d}=this._loadQualityProfile(e);null!=this._accumulateOutputTexture||(this._accumulateOutputTexture=new X.x(e,{target:t.No.TEXTURE_2D,pixelFormat:_?t.VI.RED:t.VI.RGBA,internalFormat:_?i===t.Br.FLOAT?t.lP.R32F:t.lP.R16F:t.VI.RGBA,dataType:i,samplingMode:p,wrapMode:t.e8.CLAMP_TO_EDGE,width:Math.round(512*d),height:Math.round(512*d)})),null!=this._accumulateFramebuffer||(this._accumulateFramebuffer=new b.X(e,{},this._accumulateOutputTexture)),null!=this._resolveGradientTexture||(this._resolveGradientTexture=new X.x(e,{target:t.No.TEXTURE_2D,pixelFormat:t.VI.RGBA,dataType:t.Br.UNSIGNED_BYTE,samplingMode:t.cw.LINEAR,wrapMode:t.e8.CLAMP_TO_EDGE})),null!=this._tileQuad||(this._tileQuad=new ce.Z(e,[0,0,1,0,0,1,1,1]))}_updateResources(e){const{gradientHash:_,gradient:i}=e;this._prevGradientHash!==_&&(this._resolveGradientTexture.resize(i.length/4,1),this._resolveGradientTexture.setData(i),this._prevGradientHash=_)}_loadQualityProfile(e){if((0,y.Wi)(this._qualityProfile)){const{textureFloat:_,colorBufferFloat:i}=e.capabilities,{textureFloat:p,textureFloatLinear:d,textureHalfFloat:v,textureHalfFloatLinear:g,HALF_FLOAT:h}=_,{textureFloat:T,textureHalfFloat:C,floatBlend:S}=i;let D,P;const ie=p&&T&&S,L=v&&C;ie&&d?(D=t.Br.FLOAT,P=t.cw.LINEAR):L&&g?(D=h,P=t.cw.LINEAR):ie?(D=t.Br.FLOAT,P=t.cw.NEAREST):L?(D=h,P=t.cw.NEAREST):De.error("Missing webgl extensions for heatmap!"),P===t.cw.NEAREST&&De.warnOnce("Missing linear filtering webgl extension(s). Heatmap quality may be reduced."),this._qualityProfile={dataType:D,samplingMode:P,shadingRate:.5,defines:D===h?["heatmapPrecisionHalfFloat"]:[]}}return this._qualityProfile}},pieChart:class et extends Ce{supportsSymbology(e){return e===B.mD.PIE_CHART}_drawMarkers(e,_,i,p,d,v,g){const{context:h}=e,{rendererInfo:T}=e,{rendererSchema:C}=T;(0,xe.t4)(C,"pie-chart"),i.setUniform4fv("u_colors",C.colors),i.setUniform4fv("u_defaultColor",C.defaultColor),i.setUniform4fv("u_othersColor",C.othersColor),i.setUniform4fv("u_outlineColor",C.outlineColor),i.setUniform1f("u_donutRatio",C.holePercentage),i.setUniform1f("u_sectorThreshold",C.sectorThreshold),i.setUniform1f("u_outlineWidth",C.outlineWidth),h.drawElements(p,d,t.g.UNSIGNED_INT,v)}}}},18717:(he,ne,m)=>{m.d(ne,{Z:()=>te});var oe=m(62208),y=m(49966),I=m(62856),ce=m(67969);class te extends I.Z{constructor(){super(...arguments),this._visualState={time:0,dvsMat3:(0,y.c)(),displayViewMat3:(0,y.c)()}}dispose(){}prepareState(K){const{context:j}=K;j.setColorMask(!0,!0,!0,!0),j.setStencilFunction(ce.wb.EQUAL,0,255)}draw(K,j){const{requestRender:w}=K,{displayData:z}=j;if((0,oe.Wi)(z)||("loaded"===z.state.name&&z.attach(K),"attached"!==z.state.name))return;const le=z.state.resources;le.ready||!(0,oe.pC)(w)?(this._visualState.time=K.time/1e3,this._visualState.dvsMat3=j.transforms.dvs,this._visualState.displayViewMat3=K.state.displayViewMat3,z.flowStyle.render(K,this._visualState,le),z.flowStyle.animated&&(0,oe.pC)(w)&&w()):w()}}},15765:(he,ne,m)=>{m.d(ne,{Z:()=>t});var oe=m(62208),y=m(62856),I=m(67969);const ce=new Float32Array([.27058823529411763,.4588235294117647,.7098039215686275,1,.396078431372549,.5372549019607843,.7215686274509804,1,.5176470588235295,.6196078431372549,.7294117647058823,1,.6352941176470588,.7058823529411765,.7411764705882353,1,.7529411764705882,.8,.7450980392156863,1,.8705882352941177,.8901960784313725,.7490196078431373,1,1,1,.7490196078431373,1,1,.8627450980392157,.6313725490196078,1,.9803921568627451,.7254901960784313,.5176470588235295,1,.9607843137254902,.596078431372549,.4117647058823529,1,.9294117647058824,.4588235294117647,.3176470588235294,1,.9098039215686274,.08235294117647059,.08235294117647059,1]),te={beaufort_ft:ce,beaufort_m:ce,beaufort_km:ce,beaufort_mi:ce,beaufort_kn:new Float32Array([.1568627450980392,.5725490196078431,.7803921568627451,1,.34901960784313724,.6352941176470588,.7294117647058823,1,.5058823529411764,.7019607843137254,.6705882352941176,1,.6274509803921569,.7607843137254902,.6078431372549019,1,.7490196078431373,.8313725490196079,.5411764705882353,1,.8549019607843137,.9019607843137255,.4666666666666667,1,.9803921568627451,.9803921568627451,.39215686274509803,1,.9882352941176471,.8352941176470589,.3254901960784314,1,.9882352941176471,.7019607843137254,.4,1,.9803921568627451,.5529411764705883,.20392156862745098,1,.9686274509803922,.43137254901960786,.16470588235294117,1,.9411764705882353,.2784313725490196,.11372549019607843,1]),classified_arrow:new Float32Array([.2196078431372549,.6588235294117647,0,1,.5450980392156862,1.2117647058823529,0,1,1,1,0,1,1,.5019607843137255,0,1,1,0,0,1]),ocean_current_m:new Float32Array([.3058823529411765,.10196078431372549,.6,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),ocean_current_kn:new Float32Array([0,0,0,1,0,.1450980392156863,.39215686274509803,1,.3058823529411765,.10196078431372549,.6,1,.592156862745098,0,.39215686274509803,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.6941176470588235,.3058823529411765,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.7019607843137254,.20392156862745098,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),single_arrow:new Float32Array([0,92/255,230/255,1]),wind_speed:new Float32Array([0,0,0,1])};class t extends y.Z{constructor(){super(...arguments),this._desc={magdir:{vsPath:"raster/magdir",fsPath:"raster/magdir",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])},scalar:{vsPath:"raster/scalar",fsPath:"raster/scalar",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])}}}dispose(){}prepareState({context:j},w){j.setBlendingEnabled(!0),j.setBlendFunctionSeparate(I.zi.ONE,I.zi.ONE_MINUS_SRC_ALPHA,I.zi.ONE,I.zi.ONE_MINUS_SRC_ALPHA),j.setColorMask(!0,!0,!0,!0),j.setStencilWriteMask(0),j.setStencilTestEnabled(!0),j.setStencilOp(I.xS.KEEP,I.xS.KEEP,I.xS.REPLACE),j.setStencilFunction(I.wb.EQUAL,w.stencilRef,255)}draw(j,w){if((0,oe.Wi)(w.source)||0===w.source.validPixelCount)return;const{timeline:z}=j;if(z.begin(this.name),w.updateVectorFieldVAO(j),"scalar"===j.renderPass){const le=w.vaoData.scalar;le&&this._drawScalars(j,w,le.vao,le.elementCount)}else{const le=w.vaoData.magdir;le&&this._drawTriangles(j,w,le.vao,le.elementCount)}z.end(this.name)}_drawTriangles(j,w,z,le){const{context:se,painter:de,requestRender:A}=j,{symbolizerParameters:E}=w,ae=E.dataRange?["dataRange"]:[];"geographic"===E.rotationType&&ae.push("rotationGeographic");const N=de.materialManager.getProgram(this._desc.magdir,ae);if((0,oe.pC)(A)&&!N.isCompiled)return void A();se.useProgram(N);const{coordScale:H,opacity:x,transforms:M}=w;N.setUniform2fv("u_coordScale",H),N.setUniform1f("u_opacity",x),N.setUniformMatrix3fv("u_dvsMat3",M.dvs);const{style:F,dataRange:R,rotation:B,symbolPercentRange:me}=E;N.setUniform4fv("u_colors",te[F]||te.single_arrow),N.setUniform2fv("u_dataRange",R),N.setUniform1f("u_rotation",B),N.setUniform2fv("u_symbolPercentRange",me);const ve=this._getSymbolSize(j,w);N.setUniform2fv("u_symbolSize",ve),se.bindVAO(z),se.drawElements(I.MX.TRIANGLES,le,I.g.UNSIGNED_INT,0)}_drawScalars(j,w,z,le){const{context:se,painter:de,requestRender:A}=j,{symbolizerParameters:E}=w,ae=[];"wind_speed"===E.style?ae.push("innerCircle"):E.dataRange&&ae.push("dataRange"),"geographic"===E.rotationType&&ae.push("rotationGeographic");const N=de.materialManager.getProgram(this._desc.scalar,ae);if((0,oe.pC)(A)&&!N.isCompiled)return void A();se.useProgram(N);const{coordScale:H,opacity:x,transforms:M}=w;N.setUniform2fv("u_coordScale",H),N.setUniform1f("u_opacity",x),N.setUniformMatrix3fv("u_dvsMat3",M.dvs);const{dataRange:F,symbolPercentRange:R}=E;N.setUniform2fv("u_dataRange",F),N.setUniform2fv("u_symbolPercentRange",R);const B=this._getSymbolSize(j,w);N.setUniform2fv("u_symbolSize",B),se.bindVAO(z),se.drawElements(I.MX.TRIANGLES,le,I.g.UNSIGNED_INT,0)}_getSymbolSize(j,w){const z=w.key?2**(j.displayLevel-w.key.level):w.resolution/j.state.resolution,{symbolTileSize:le}=w.symbolizerParameters;return[le/(Math.round((w.width-w.offset[0])/le)*le)/z,le/(Math.round((w.height-w.offset[1])/le)*le)/z]}}},9769:(he,ne,m)=>{m.d(ne,{br:()=>z,qE:()=>se});var oe=m(62208),y=m(30217),I=m(49966),ce=m(9545),te=m(79751),t=m(57477),K=m(67969),j=m(38982);const w={bandCount:3,outMin:0,outMax:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class z extends t.s{constructor(A=null,E=null,ae=null){super(),this._textureInvalidated=!0,this._colormapTextureInvalidated=!0,this._supportsBilinearTexture=!0,this.stencilRef=0,this.coordScale=[1,1],this._symbolizerParameters=null,this.height=null,this.isRendereredSource=!1,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this.rawPixelData=null,this._suspended=!1,this._bandIds=null,this._interpolation=null,this._transformGrid=null,this.width=null,this.x=0,this.y=0,this.source=A,this.transformGrid=E,this.interpolation=ae}destroy(){var A;null==(A=this.getTextures())||A.textures.forEach(E=>E.dispose()),this._rasterTexture=null,this._transformGridTexture=null,this._colormapTexture=null}get symbolizerParameters(){return this._symbolizerParameters||w}set symbolizerParameters(A){this._symbolizerParameters!==A&&(this._symbolizerParameters=A,this._colormapTextureInvalidated=!0)}get source(){return this._source}set source(A){this._source!==A&&(this._source=A,this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null),this.invalidateTexture())}get suspended(){return this._suspended}set suspended(A){this._suspended&&!A&&this.stage&&(this.ready(),this.requestRender()),this._suspended=A}get bandIds(){return this._bandIds}set bandIds(A){this._bandIds=A,this._isBandIdschanged(A)&&this.invalidateTexture()}get interpolation(){return this._interpolation||"nearest"}set interpolation(A){this._interpolation=A,this._rasterTexture&&this._rasterTexture.setSamplingMode("bilinear"===this._getTextureSamplingMethod(A)?K.cw.LINEAR:K.cw.NEAREST)}get transformGrid(){return this._transformGrid}set transformGrid(A){this._transformGrid=A,this._transformGridTexture&&(this._transformGridTexture.dispose(),this._transformGridTexture=null)}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this.requestRender())}_createTransforms(){return{dvs:(0,I.c)()}}setTransform(A){const E=(0,y.b)(this.transforms.dvs),[ae,N]=A.toScreenNoRotation([0,0],[this.x,this.y]),H=this.resolution/this.pixelRatio/A.resolution,x=H*this.width,M=H*this.height,F=Math.PI*this.rotation/180;(0,y.c)(E,E,(0,ce.f)(ae,N)),(0,y.c)(E,E,(0,ce.f)(x/2,M/2)),(0,y.r)(E,E,-F),(0,y.c)(E,E,(0,ce.f)(-x/2,-M/2)),(0,y.j)(E,E,(0,ce.f)(x,M)),(0,y.m)(this.transforms.dvs,A.displayViewMat3,E)}getTextures(){if(!this._rasterTexture)return null;const A=[],E=[];return this._transformGridTexture&&(E.push(this._transformGridTexture),A.push("u_transformGrid")),this._rasterTexture&&(E.push(this._rasterTexture),A.push("u_image")),this._colormapTexture&&(E.push(this._colormapTexture),A.push("u_colormap")),{names:A,textures:E}}onAttach(){this.invalidateTexture()}onDetach(){this.invalidateTexture()}updateTexture({context:A}){var ae,N,H;if(!this.stage)return null==(ae=this._rasterTexture)||ae.dispose(),null==(N=this._transformGridTexture)||N.dispose(),null==(H=this._colormapTexture)||H.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null,this._transformGridTexture=null,void(this._colormapTexture=null);const E=this._isValidSource(this.source);E&&this._colormapTextureInvalidated&&(this._colormapTextureInvalidated=!1,this._updateColormapTexture(A)),this._textureInvalidated&&(this._textureInvalidated=!1,this._createOrDestroyRasterTexture(A),this._rasterTexture&&(E?this.transformGrid&&!this._transformGridTexture&&(this._transformGridTexture=(0,j.Br)(A,this.transformGrid)):this._rasterTexture.setData(null)),this.suspended||(this.ready(),this.requestRender()))}_createOrDestroyRasterTexture(A){var x,M;const E=(0,oe.pC)(this.source)?(0,te.qF)(this.source,this.bandIds):null;if(!this._isValidSource(E))return void(this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null));const ae=!this._isBandIdschanged(this.bandIds);if(this._rasterTexture){if(ae)return;this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null}this._supportsBilinearTexture=null==(x=A.capabilities.textureFloat)?void 0:x.textureFloatLinear;const N=this._getTextureSamplingMethod(this.interpolation),H=this.isRendereredSource||!(null==(M=A.capabilities.textureFloat)?void 0:M.textureFloat);this._rasterTexture=(0,j.s9)(A,E,N,H),this._rasterTextureBandIds=this.bandIds?[...this.bandIds]:null}_isBandIdschanged(A){const E=this._rasterTextureBandIds;return!(null==E&&null==A||E&&A&&E.join("")===A.join(""))}_isValidSource(A){var E;return(0,oe.pC)(A)&&(null==(E=A.pixels)?void 0:E.length)>0}_getTextureSamplingMethod(A){const{type:E,colormap:ae}=this.symbolizerParameters,N="lut"===E||"stretch"===E&&(0,oe.pC)(ae);return!this._supportsBilinearTexture||N||"bilinear"!==A&&"cubic"!==A?"nearest":"bilinear"}_updateColormapTexture(A){const E=this._colormap,ae=this.symbolizerParameters.colormap;return ae?E?ae.length!==E.length||ae.some((N,H)=>N!==E[H])?(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),this._colormapTexture=(0,j.iC)(A,ae),void(this._colormap=ae)):void 0:(this._colormapTexture=(0,j.iC)(A,ae),void(this._colormap=ae)):(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),void(this._colormap=null))}}function se(de){return(0,oe.pC)(de.source)}},93292:(he,ne,m)=>{m.d(ne,{As:()=>ce,cD:()=>te,sy:()=>I});var oe=m(67969),y=m(40852);const I={geometry:[new y.G("a_pos",2,oe.g.BYTE,0,2)]},ce={geometry:[new y.G("a_pos",2,oe.g.BYTE,0,4),new y.G("a_tex",2,oe.g.BYTE,2,4)]},te={geometry:[new y.G("a_pos",2,oe.g.UNSIGNED_SHORT,0,4)]}},50392:(he,ne,m)=>{m.d(ne,{Z:()=>te});var oe=m(83994),y=m(67969),I=m(49353),ce=m(40852);class te{constructor(K,j){this.rctx=K,this._vertexBuffer=oe.f.createVertex(K,y.l1.STATIC_DRAW,new Uint16Array(j)),this._vao=new I.U(K,new Map([["a_position",0]]),{geometry:[new ce.G("a_position",2,y.g.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=j.length/2}bind(){this.rctx.bindVAO(this._vao)}unbind(){this.rctx.bindVAO(null)}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(y.MX.TRIANGLE_STRIP,0,this._count)}}},44589:(he,ne,m)=>{m.d(ne,{Z:()=>Ie}),m(8314);var y=m(62208),I=m(49966),ce=m(51434),te=m(1011),t=m(26584),K=m(63290),j=m(32917),w=m(57477),z=m(11915),le=m(67831),se=m(99770),de=m(82054),A=m(88071),E=m(5254),ae=m(83994),N=m(67969);const H=K.Z.getLogger("esri.views.2d.engine.webgl.Mesh2D"),M=(ge,b,O,X)=>{let Q=0;for(let re=1;re<O;re++)Q+=(ge[2*(b+re)]-ge[2*(b+re-1)])*(ge[2*(b+re)+1]+ge[2*(b+re-1)+1]);return X?Q>0:Q<0},F=({coords:ge,lengths:b},O)=>{const X=[];for(let Q=0,re=0;Q<b.length;re+=b[Q],Q+=1){const ue=re,ye=[];for(;Q<b.length-1&&M(ge,re+b[Q],b[Q+1],O);Q+=1,re+=b[Q])ye.push(re+b[Q]-ue);const Ce=ge.slice(2*ue,2*(re+b[Q])),Oe=(0,z.e)(Ce,ye,2);for(const De of Oe)X.push(De+ue)}return X};class R{constructor(b,O,X,Q=!1){this._cache={},this.vertices=b,this.indices=O,this.primitiveType=X,this.isMapSpace=Q}static fromRect({x:b,y:O,width:X,height:Q}){return R.fromScreenExtent({xmin:b,ymin:O,xmax:b+X,ymax:O+Q})}static fromPath(b){const O=(0,de.ks)(new A.Z,b.path,!1,!1),X=O.coords,Q=new Uint32Array(F(O,!0)),re=new Uint32Array(X.length/2);for(let ue=0;ue<re.length;ue++)re[ue]=(0,E.UJ)(Math.floor(X[2*ue]),Math.floor(X[2*ue+1]));return new R({geometry:re},Q,N.MX.TRIANGLES)}static fromGeometry(b,O){const X=O.geometry.type;switch(X){case"polygon":return R.fromPolygon(b,O.geometry);case"extent":return R.fromMapExtent(b,O.geometry);default:return H.error(new t.Z("mapview-bad-type",`Unable to create a mesh from type ${X}`,O)),R.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(b,O){const X=(0,de.Uy)(new A.Z,O,!1,!1),Q=X.coords,re=new Uint32Array(F(X,!1)),ue=new Uint32Array(Q.length/2),ye=(0,se.a)(),Ce=(0,se.a)();for(let Oe=0;Oe<ue.length;Oe++)(0,le.a)(ye,Q[2*Oe],Q[2*Oe+1]),b.toScreen(Ce,ye),ue[Oe]=(0,E.UJ)(Math.floor(Ce[0]),Math.floor(Ce[1]));return new R({geometry:ue},re,N.MX.TRIANGLES,!0)}static fromScreenExtent({xmin:b,xmax:O,ymin:X,ymax:Q}){const re={geometry:new Uint32Array([(0,E.UJ)(b,X),(0,E.UJ)(O,X),(0,E.UJ)(b,Q),(0,E.UJ)(b,Q),(0,E.UJ)(O,X),(0,E.UJ)(O,Q)])},ue=new Uint32Array([0,1,2,3,4,5]);return new R(re,ue,N.MX.TRIANGLES)}static fromMapExtent(b,O){const[X,Q]=b.toScreen([0,0],[O.xmin,O.ymin]),[re,ue]=b.toScreen([0,0],[O.xmax,O.ymax]),ye={geometry:new Uint32Array([(0,E.UJ)(X,Q),(0,E.UJ)(re,Q),(0,E.UJ)(X,ue),(0,E.UJ)(X,ue),(0,E.UJ)(re,Q),(0,E.UJ)(re,ue)])},Ce=new Uint32Array([0,1,2,3,4,5]);return new R(ye,Ce,N.MX.TRIANGLES)}destroy(){(0,y.pC)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const b in this._cache.vertexBuffers)(0,y.pC)(this._cache.vertexBuffers[b])&&this._cache.vertexBuffers[b].dispose()}get elementType(){return(ge=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return N.g.UNSIGNED_BYTE;case 2:return N.g.UNSIGNED_SHORT;case 4:return N.g.UNSIGNED_INT;default:throw new t.Z("Cannot get DataType of array")}})()}getIndexBuffer(b,O=N.l1.STATIC_DRAW){return this._cache.indexBuffer||(this._cache.indexBuffer=ae.f.createIndex(b,O,this.indices)),this._cache.indexBuffer}getVertexBuffers(b,O=N.l1.STATIC_DRAW){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((X,Q)=>Qe(Ue({},X),{[Q]:ae.f.createVertex(b,O,this.vertices[Q])}),{})),this._cache.vertexBuffers}}var B=m(49353);const me=K.Z.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),ve=ge=>parseFloat(ge)/100;class xe extends w.s{constructor(b,O){super(),this._clip=O,this._cache={},this.stage=b,this._handle=(0,j.YP)(()=>O.version,()=>this._invalidate()),this.ready()}static fromClipArea(b,O){return new xe(b,O)}_destroyGL(){(0,y.pC)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),(0,y.pC)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(b,O,X,Q){const[re,ue]=O.size;if("geometry"!==this._clip.type&&this._lastWidth===re&&this._lastHeight===ue||(this._lastWidth=re,this._lastHeight=ue,this._destroyGL()),(0,y.Wi)(this._cache.vao)){const ye=this._createMesh(O,this._clip),Ce=ye.getIndexBuffer(b),Oe=ye.getVertexBuffers(b);this._cache.mesh=ye,this._cache.vao=new B.U(b,X,Q,Oe,Ce)}return this._cache.vao}_createTransforms(){return{dvs:(0,I.c)()}}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(b,O){const[X,Q]=b.size,re="string"==typeof O.left?ve(O.left)*X:O.left,ue="string"==typeof O.right?ve(O.right)*X:O.right,ye="string"==typeof O.top?ve(O.top)*Q:O.top,Ce="string"==typeof O.bottom?ve(O.bottom)*Q:O.bottom,De=ye;return{x:re,y:De,width:Math.max(X-ue-re,0),height:Math.max(Q-Ce-De,0)}}_createMesh(b,O){switch(O.type){case"rect":return R.fromRect(this._createScreenRect(b,O));case"path":return R.fromPath(O);case"geometry":return R.fromGeometry(b,O);default:return me.error(new t.Z("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),R.fromRect({x:0,y:0,width:1,height:1})}}}var Ae=m(39406);class Ie extends te.W{constructor(){super(...arguments),this.name=this.constructor.name}set clips(b){this._clips=b,this.children.forEach(O=>O.clips=b),this._updateClippingInfo()}_createTransforms(){return{dvs:(0,I.c)()}}doRender(b){const O=this.createRenderParams(b),{painter:X,globalOpacity:Q,profiler:re,drawPhase:ue}=O,ye=ue===Ae.jx.LABEL||ue===Ae.jx.HIGHLIGHT?1:Q*this.computedOpacity;re.recordContainerStart(this.name),X.beforeRenderLayer(O,this._clippingInfos?255:0,ye),this.updateTransforms(b.state),this.renderChildren(O),X.compositeLayer(O,ye),re.recordContainerEnd()}renderChildren(b){(0,y.Wi)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(b.painter));for(const O of this.children)O.beforeRender(b);for(const O of this._renderPasses)try{O.render(b)}catch(X){}for(const O of this.children)O.afterRender(b)}createRenderParams(b){return b.requireFBO=this.requiresDedicatedFBO,b}prepareRenderPasses(b){return[b.registerRenderPass({name:"clip",brushes:[ce.U.clip],target:()=>this._clippingInfos,drawPhase:Ae.jx.MAP|Ae.jx.LABEL|Ae.jx.LABEL_ALPHA|Ae.jx.DEBUG|Ae.jx.HIGHLIGHT})]}updateTransforms(b){for(const O of this.children)O.setTransform(b)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if((0,y.pC)(this._clippingInfos)&&(this._clippingInfos.forEach(O=>O.destroy()),this._clippingInfos=null),!this.stage)return;const b=this._clips;(0,y.pC)(b)&&b.length&&(this._clippingInfos=b.items.map(O=>xe.fromClipArea(this.stage,O))),this.requestRender()}}},62856:(he,ne,m)=>{m.d(ne,{Z:()=>oe});class oe{constructor(){this.name=this.constructor.name||"UnnamedBrush"}prepareState(I,ce,te){}draw(I,ce,te){}drawMany(I,ce,te){for(const t of ce)this.draw(I,t,te)}}},29384:(he,ne,m)=>{m.d(ne,{Z:()=>E});var oe=m(62208),y=m(67709),I=m(93292),ce=m(62856),te=m(11176),t=m(37977);const K={shaders:{vertexShader:(0,t.w)("tileInfo/tileInfo.vert"),fragmentShader:(0,t.w)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])};var j=m(83994),w=m(67969),z=m(94299),le=m(55086),se=m(49353);class E extends ce.Z{constructor(){super(...arguments),this._color=(0,y.f)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:N}){N.setBlendingEnabled(!0),N.setBlendFunctionSeparate(w.zi.ONE,w.zi.ONE_MINUS_SRC_ALPHA,w.zi.ONE,w.zi.ONE_MINUS_SRC_ALPHA),N.setColorMask(!0,!0,!0,!0),N.setStencilWriteMask(0),N.setStencilTestEnabled(!1)}draw(N,H){const{context:x,requestRender:M}=N;if(!H.isReady)return;if(this._loadWGLResources(x),(0,oe.pC)(M)&&(!this._outlineProgram.isCompiled||!this._tileInfoProgram.isCompiled))return void M();x.bindVAO(this._outlineVertexArrayObject),x.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",H.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",H.rangeX,H.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),x.drawArrays(w.MX.LINE_STRIP,0,4);const F=this._getTexture(x,H);F&&(x.bindVAO(this._tileInfoVertexArrayObject),x.useProgram(this._tileInfoProgram),x.bindTexture(F,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",H.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",H.rangeX/H.width,H.rangeY/H.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",F.descriptor.width,F.descriptor.height),x.drawArrays(w.MX.TRIANGLE_STRIP,0,4)),x.bindVAO()}_loadWGLResources(N){if(this._outlineProgram&&this._tileInfoProgram)return;const H=(0,z.H)(N,te.O),x=(0,z.H)(N,K),M=new Int8Array([0,0,1,0,1,1,0,1]),F=j.f.createVertex(N,w.l1.STATIC_DRAW,M),R=new se.U(N,te.O.attributes,I.sy,{geometry:F}),B=new Int8Array([0,0,1,0,0,1,1,1]),me=j.f.createVertex(N,w.l1.STATIC_DRAW,B),ve=new se.U(N,K.attributes,I.sy,{geometry:me});this._outlineProgram=H,this._tileInfoProgram=x,this._outlineVertexArrayObject=R,this._tileInfoVertexArrayObject=ve}_getTexture(N,H){if(H.texture&&H.triangleCountReportedInDebug===H.triangleCount)return H.texture;H.triangleCountReportedInDebug=H.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const x=H.triangleCount;let M=H.key.id;H.triangleCount>0&&(M+=`, ${x}`);const F=this._canvas,R=F.getContext("2d");return R.font="24px sans-serif",R.textAlign="left",R.textBaseline="top",R.clearRect(0,0,300,32),x>1e5?(R.fillStyle="red",R.fillRect(0,0,300,32),R.fillStyle="black"):(R.clearRect(0,0,300,32),R.fillStyle="blue"),R.fillText(M,0,0),H.texture=new le.x(N,{target:w.No.TEXTURE_2D,pixelFormat:w.VI.RGBA,dataType:w.Br.UNSIGNED_BYTE,samplingMode:w.cw.NEAREST,wrapMode:w.e8.CLAMP_TO_EDGE},F),H.texture}}},13382:(he,ne,m)=>{m.d(ne,{Z:()=>z});var oe=m(62208),y=m(67709),I=m(93292),ce=m(62856),te=m(11176),t=m(83994),K=m(67969),j=m(94299),w=m(49353);class z extends ce.Z{constructor(){super(...arguments),this._color=(0,y.f)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:se},de){se.setDepthWriteEnabled(!1),se.setDepthTestEnabled(!1),se.setStencilTestEnabled(!0),se.setBlendingEnabled(!1),se.setColorMask(!1,!1,!1,!1),se.setStencilOp(K.xS.KEEP,K.xS.KEEP,K.xS.REPLACE),se.setStencilWriteMask(255),se.setStencilFunctionSeparate(K.LR.FRONT_AND_BACK,K.wb.GREATER,de.stencilRef,255)}draw(se,de){const{context:A,requestRender:E}=se;this._initialized||this._initialize(A),!(0,oe.pC)(E)||this._solidProgram.isCompiled?(A.bindVAO(this._solidVertexArrayObject),A.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",de.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[de.rangeX,de.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),A.drawArrays(K.MX.TRIANGLE_STRIP,0,4),A.bindVAO()):E()}_initialize(se){if(this._initialized)return!0;const de=(0,j.H)(se,te.O);if(!de)return!1;const A=new Int8Array([0,0,1,0,0,1,1,1]),E=t.f.createVertex(se,K.l1.STATIC_DRAW,A),ae=new w.U(se,te.O.attributes,I.sy,{geometry:E});return this._solidProgram=de,this._solidVertexArrayObject=ae,this._initialized=!0,!0}}},11176:(he,ne,m)=>{m.d(ne,{O:()=>y});var oe=m(37977);const y={shaders:{vertexShader:(0,oe.w)("background/background.vert"),fragmentShader:(0,oe.w)("background/background.frag")},attributes:new Map([["a_pos",0]])}},37977:(he,ne,m)=>{m.d(ne,{w:()=>te});const oe={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(vividLight(Cb.r, Cs.r),\nvividLight(Cb.g, Cs.g),\nvividLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}"}},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},heatmap:{heatmapResolve:{"heatmapResolve.frag":"precision highp float;\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 4.0\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform sampler2D u_texture;\nuniform sampler2D u_gradient;\nuniform vec2 u_densityMinAndInvRange;\nuniform float u_densityNormalization;\nvarying vec2 v_uv;\nvoid main() {\nvec4 data = texture2D(u_texture, v_uv);\nfloat density = data.r * COMPRESSION_FACTOR;\ndensity *= u_densityNormalization;\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\ngl_FragColor = vec4(color.rgb * color.a, color.a);\n}","heatmapResolve.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nvarying vec2 v_uv;\nconst float UV_TO_TILE_SPACE = 512.;\nvoid main() {\nv_uv = a_pos;\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos * UV_TO_TILE_SPACE, 1.)).xy, 1., 1.);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp sampler2D u_attributeData4;\nuniform highp sampler2D u_attributeData5;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(u_attributeTextureSize));\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nhighp vec4 getAttributeData4(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData4, coords);\n}\nhighp vec4 getAttributeData5(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData5, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","barycentric.glsl":"float inTriangle(vec3 bary) {\nvec3 absBary = abs(bary);\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\n}\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\nmat3 xyToBarycentricMat3 = mat3(\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\n);\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.00001;\nconst float EPSILON_HITTEST = 0.05;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#include <materials/symbologyTypeUtils.glsl>\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvarying lowp float v_isOutline;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = v_color;\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\n#ifdef VV_COLOR\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\n#endif\nout_color = v_opacity * v_color * color;\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#include <materials/symbologyTypeUtils.glsl>\n#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\n#include <util/encoding.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nvec2 scale = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_scale;\nfloat width = u_zoomFactor * a_width * scale.x;\nfloat height = u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nfloat dx = 0.0;\nfloat dy = 0.0;\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\nfloat id = rgba2float(vec4(a_id, 0.0));\ndx = rand(vec2(id, 0.0));\ndy = rand(vec2(0.0, id));\n}\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\ndx,            dy,           1);\nvec2 tileOffset = vec2(u_tileOffset.x * cosA - u_tileOffset.y * sinA, u_tileOffset.x * sinA + u_tileOffset.y * cosA);\ntileOffset = mod(tileOffset, vec2(a_aux2.x, a_aux2.y));\nvec2 symbolOffset = (a_offset - tileOffset) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\nout_pos = vec3(0., 0., 2.);\nreturn;\n}\n#endif\nhittestFill(out_color, out_pos);\ngl_PointSize = 1.0;\n}\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nhighp vec3 pos  = vec3(0.);\nhighp vec4 color  = vec4(0.);\ndraw(color, pos);\nv_color = color;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}","hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestFill(\nout lowp vec4 out_color,\nout highp vec3 out_pos\n) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nfloat hittestDist = u_hittestDist;\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist < 0. || dist >= hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\n}\n#endif"},hittest:{"common.glsl":"#ifdef HITTEST\nuniform float u_hittestDist;\nuniform highp vec2 u_hittestPos;\nfloat projectScalar(vec2 a, vec2 b) {\nreturn dot(a, normalize(b));\n}\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\nvec2 L = p2 - p1;\nvec2 A = p0 - p1;\nfloat projAL = projectScalar(A, L);\nfloat t = clamp(projAL / length(L), 0., 1.);\nreturn distance(p0, p1 + t * (p2 - p1));\n}\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\nfloat dist = distance(pos, vec3(u_hittestPos, 1.));\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif ((dist - size) > u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\n}\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\nreturn inTriangle(xyToBarycentric(p, a, b, c));\n}\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\nvec2 ba = b - a;\nvec2 ca = c - a;\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\nif (isParallel) {\nreturn -1.;\n}\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\nreturn 0.;\n}\nfloat distAB = distPointSegment(p, a, b);\nfloat distBC = distPointSegment(p, b, c);\nfloat distCA = distPointSegment(p, c, a);\nreturn min(min(distAB, distBC), distCA);\n}\n#endif"},icon:{"common.glsl":"#include <util/encoding.glsl>\nuniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif\n#ifdef SDF\nvec4 getColor(vec2 v_size, vec2 v_tex) {\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif",heatmapAccumulate:{"common.glsl":"varying lowp vec4 v_hittestResult;\nvarying mediump vec2 v_offsetFromCenter;\nvarying highp float v_fieldValue;","heatmapAccumulate.frag":"precision mediump float;\n#include <materials/icon/heatmapAccumulate/common.glsl>\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 0.25\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform lowp sampler2D u_texture;\nvoid main() {\n#ifdef HITTEST\ngl_FragColor = v_hittestResult;\n#else\nfloat radius = length(v_offsetFromCenter);\nfloat shapeWeight = step(radius, 1.0);\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\n#endif\n}","heatmapAccumulate.vert":"precision highp float;\nattribute vec2 a_vertexOffset;\nvec4 a_color = vec4(0.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\nuniform float u_radius;\nuniform float u_isFieldActive;\nconst float TILE_TO_CLIP_SPACE = 2.0 / 512.0;\n#include <materials/vcommon.glsl>\n#include <materials/hittest/common.glsl>\n#include <materials/icon/heatmapAccumulate/common.glsl>\nvoid main() {\nfloat filterFlags = getFilterFlags();\n#ifdef HITTEST\nhighp vec4 out_hittestResult = vec4(0.);\nhighp vec3 out_pos = vec3(0.);\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\nv_hittestResult = out_hittestResult;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\nv_offsetFromCenter = sign(a_vertexOffset);\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\nvec3 centerPos = vec3(a_pos * POSITION_PRECISION * TILE_TO_CLIP_SPACE - 1.0, 1.0);\nvec3 vertexPos = centerPos + vec3(v_offsetFromCenter, 0.0) * u_radius * TILE_TO_CLIP_SPACE;\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},"hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_vertexOffset1;\nattribute vec2 a_vertexOffset2;\nattribute vec2 a_texCoords1;\nattribute vec2 a_texCoords2;\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\n}\nvoid hittestIcon(\ninout lowp vec4 out_color,\nout highp vec3 out_pos,\nin vec3 pos,\nin vec3 offset,\nin vec2 size,\nin float scaleFactor,\nin float isMapAligned\n) {\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec2 tex0 = a_texCoords  / u_mosaicSize;\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\nfloat alphaSum = 0.;\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\nout_pos.z += step(alphaSum, .05) * 2.0;\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\n}\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvoid main()\n{\n#ifdef HITTEST\nvec4 color = v_color;\n#else\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\n#endif\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\n#ifdef VV_SIZE\nfloat f = getSize(size.y) / size.y;\nfloat sizeFactor = size.y / referenceSize;\nreturn getSize(referenceSize) / referenceSize;\n#else\nreturn 1.;\n#endif\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\nsize.xy     *= scaleFactor;\noffset.xy   *= scaleFactor;\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\nvec2 v_tex   = a_texCoords / u_mosaicSize;\nfloat filterFlags = getFilterFlags();\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\nv_sizeTex  = vec4(size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\n#ifdef HITTEST\nhighp vec4 out_color = vec4(0.);\nhighp vec3 out_pos   = vec3(0.);\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\nv_color = out_color;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nv_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\ngl_Position = vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist >= u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\n}\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = v_color;\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nhighp vec3 pos  = vec3(0.);\nv_color = vec4(0.);\nhittestLine(v_color, pos, halfWidth);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},pie:{"pie.frag":"precision mediump float;\n#include <util/atan2.glsl>\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nuniform lowp vec4 u_colors[NUMBER_OF_FIELDS];\nuniform lowp vec4 u_defaultColor;\nuniform lowp vec4 u_othersColor;\nuniform lowp vec4 u_outlineColor;\nuniform float u_donutRatio;\nuniform float u_sectorThreshold;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\n#if __VERSION__ == 300\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\nreturn u_colors[colorIndex];\n#else\nmediump int colorIndex;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == index) {\ncolorIndex = int(filteredSectorToColorId[i].y);\n}\n}\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == colorIndex) {\nreturn u_colors[i];\n}\n}\nreturn u_colors[NUMBER_OF_FIELDS - 1];\n#endif\n}\nconst int OTHER_SECTOR_ID = 255;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor() {\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\nif (angle < 0.0) {\nangle += 360.0;\n} else if (angle > 360.0) {\nangle = mod(angle, 360.0);\n}\nint numOfEntries = int(v_numOfEntries);\nfloat maxSectorAngle = v_maxSectorAngle;\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || u_sectorThreshold > 0.0) ? u_othersColor : u_defaultColor;\nlowp vec4 prevColor = vec4(0.0);\nlowp vec4 nextColor = vec4(0.0);\nfloat startSectorAngle = 0.0;\nfloat endSectorAngle = 0.0;\nif (angle < maxSectorAngle) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nstartSectorAngle = endSectorAngle;\nendSectorAngle = v_filteredSectorToColorId[index].x;\nif (endSectorAngle > angle) {\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\nprevColor = u_sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = u_sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? u_othersColor :\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\nbreak;\n}\nif (index == numOfEntries - 1) {\nbreak;\n}\n}\n} else {\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\nstartSectorAngle = maxSectorAngle;\nendSectorAngle = 360.0;\n}\nlowp vec4 outlineColor = u_outlineColor;\nfloat offset = length(v_offset);\nfloat distanceSize = offset * v_size;\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\nfloat distanceToStartSector = (angle - startSectorAngle);\nfloat distanceToEndSector = (endSectorAngle - angle);\nfloat sectorThreshold = 0.6;\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\nif (endSectorAlpha > 0.0) {\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\n} else if (beginSectorAlpha > 0.0) {\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\n}\n}\nfloat donutSize = u_donutRatio * (v_size - v_outlineWidth);\nfloat endOfDonut = donutSize - v_outlineWidth;\nfloat aaThreshold = 0.75;\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\nfloat startOfOutline = v_size - v_outlineWidth;\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\n}\nreturn v_opacity * circleAlpha * fillColor;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","pie.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\nuniform float u_outlineWidth;\nuniform mediump float u_sectorThreshold;\nvarying float v_size;\nvarying vec2 v_offset;\nvarying vec2 v_filteredSectorToColorId[NUMBER_OF_FIELDS];\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};\nint filter(in float sectorAngle,\nin int currentIndex,\ninout FilteredChartInfo filteredInfo,\ninout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS]) {\nif (sectorAngle > u_sectorThreshold * 360.0) {\nfilteredInfo.endSectorAngle += sectorAngle;\n#if __VERSION__ == 300\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; i++) {\nif (i == filteredInfo.colorId) {\nfilteredSectorToColorId[i] = vec2(filteredInfo.endSectorAngle, currentIndex);\n}\n}\n#endif\n++filteredInfo.colorId;\n}\nreturn 0;\n}\nint filterValues(inout vec2 filteredSectorToColorId[NUMBER_OF_FIELDS],\ninout FilteredChartInfo filteredInfo,\nin float sectorAngles[NUMBER_OF_FIELDS]) {\nfor (int index = 0; index < NUMBER_OF_FIELDS; ++index) {\nfloat sectorValue = sectorAngles[index];\nfilter(sectorValue, index, filteredInfo, filteredSectorToColorId);\n}\nreturn filteredInfo.colorId;\n}\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/hittest/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = 0.5 * getSize(referenceSize) / referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nfloat filterNaNValues(in float value) {\nreturn value != NAN_MAGIC_NUMBER ? value : 0.0;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat outlineSize = u_outlineWidth;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 size = getMarkerSize(a_offset, a_size, outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nfloat filterFlags = getFilterFlags();\nvec3  pos         = vec3(a_pos * POSITION_PRECISION, 1.0);\nv_opacity      = getOpacity();\nv_id           = norm(a_id);\nv_pos          = u_dvsMat3 * pos + getOffset(a_offset, a_bitSet);\nv_offset       = sign(a_texCoords - 0.5);\nv_size         = max(size.x, size.y);\nv_outlineWidth = outlineSize;\nfloat attributeData[10];\nvec4 attributeData0 = getAttributeData3(a_id);\nattributeData[0] = filterNaNValues(attributeData0.x);\nattributeData[1] = filterNaNValues(attributeData0.y);\nattributeData[2] = filterNaNValues(attributeData0.z);\nattributeData[3] = filterNaNValues(attributeData0.w);\n#if (NUMBER_OF_FIELDS > 4)\nvec4 attributeData1 = getAttributeData4(a_id);\nattributeData[4] = filterNaNValues(attributeData1.x);\nattributeData[5] = filterNaNValues(attributeData1.y);\nattributeData[6] = filterNaNValues(attributeData1.z);\nattributeData[7] = filterNaNValues(attributeData1.w);\n#endif\n#if (NUMBER_OF_FIELDS > 8)\nvec4 attributeData2 = getAttributeData5(a_id);\nattributeData[8] = filterNaNValues(attributeData2.x);\nattributeData[9] = filterNaNValues(attributeData2.y);\n#endif\nfloat sum = 0.0;\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsum += attributeData[i];\n}\nfloat sectorAngles[NUMBER_OF_FIELDS];\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\n}\nvec2 filteredSectorToColorId[NUMBER_OF_FIELDS];\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\nv_numOfEntries = float(numOfEntries);\nv_maxSectorAngle = filteredInfo.endSectorAngle;\n#if __VERSION__ == 300\nv_filteredSectorToColorId = filteredSectorToColorId;\n#else\nfor (int i = 0; i < NUMBER_OF_FIELDS; ++i) {\nif (i == numOfEntries) {\nbreak;\n}\nv_filteredSectorToColorId[i] = filteredSectorToColorId[i];\n}\n#endif\n#ifdef HITTEST\nhighp vec3 out_pos = vec3(0.0);\nv_color            = vec4(0.0);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  pos, v_size);\ngl_PointSize = 1.0;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},shared:{line:{"common.glsl":"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * lineHalfWidth / line.patternSize.y;\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexY, relativeTexX));\nlowp vec4 color = texture2D(u_texture, texCoord);\n#ifdef VV_COLOR\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\n#endif\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth = 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},"symbologyTypeUtils.glsl":"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\n#endif",text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","hittest.glsl":"#include <materials/hittest/common.glsl>","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nv_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nv_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nhighp vec3 out_pos  = vec3(0.);\nv_color = vec4(0.);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\n+ u_tileMat3 * offset, fontSize / 2.);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}\nhighp float rand(in vec2 co) {\nhighp float a = 12.9898;\nhighp float b = 78.233;\nhighp float c = 43758.5453;\nhighp float dt = dot(co, vec2(a,b));\nhighp float sn = mod(dt, 3.14);\nreturn fract(sin(sn) * c);\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\n#include <materials/barycentric.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp mat3 u_tileMat3;\nuniform highp mat3 u_viewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef SUPPORTS_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrixNoDisplay(float isMapAligned) {\nreturn isMapAligned * u_viewMat3 * u_tileMat3 + (1.0 - isMapAligned) * u_tileMat3;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},overlay:{overlay:{"overlay.frag":"precision lowp float;\nuniform lowp sampler2D u_texture;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_texture, v_uv);\ngl_FragColor = color *  u_opacity;\n}","overlay.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_uv;\nuniform highp mat3 u_dvsMat3;\nvarying mediump vec2 v_uv;\nvoid main(void) {\nv_uv = a_uv;\nmediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0);\ngl_Position = vec4(pos.xy, 0.0, 1.0);\n}"}},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\ngl_FragColor = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"}},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\nfloat alpha = u_opacity * color.a;\ngl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"getFadeOpacity.glsl":"uniform float u_decayRate;\nuniform float u_fadeToZero;\nfloat getFadeOpacity(float x) {\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\n}","getFragmentColor.glsl":"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\nif (dist > featheringStart) {\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\n}\nreturn color;\n}",imagery:{"imagery.frag":"precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform float u_Min;\nuniform float u_Max;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nfloat getIntensity(float v) {\nreturn u_Min + v * (u_Max - u_Min);\n}\nvoid main(void) {\nvec4 sampled = texture2D(u_texture, v_texcoord);\nfloat intensity = getIntensity(sampled.r);\ngl_FragColor = getColor(intensity);\ngl_FragColor.a *= getOpacity(sampled.r);\ngl_FragColor.a *= sampled.a;\ngl_FragColor.rgb *= gl_FragColor.a;\n}","imagery.vert":"attribute vec2 a_position;\nattribute vec2 a_texcoord;\nuniform mat3 u_dvsMat3;\nvarying vec2 v_texcoord;\nvoid main(void) {\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},particles:{"particles.frag":"precision highp float;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/getFragmentColor.glsl>\nvoid main(void) {\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\n}","particles.vert":"attribute vec4 a_xyts0;\nattribute vec4 a_xyts1;\nattribute vec4 a_typeIdDurationSeed;\nattribute vec4 a_extrudeInfo;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/vv.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nvec2 position0 = a_xyts0.xy;\nfloat t0 = a_xyts0.z;\nfloat speed0 = a_xyts0.w;\nvec2 position1 = a_xyts1.xy;\nfloat t1 = a_xyts1.z;\nfloat speed1 = a_xyts1.w;\nfloat type = a_typeIdDurationSeed.x;\nfloat id = a_typeIdDurationSeed.y;\nfloat duration = a_typeIdDurationSeed.z;\nfloat seed = a_typeIdDurationSeed.w;\nvec2 e0 = a_extrudeInfo.xy;\nvec2 e1 = a_extrudeInfo.zw;\nfloat animationPeriod = duration + u_trailLength;\nfloat scaledTime = u_time * u_flowSpeed;\nfloat randomizedTime = scaledTime + seed * animationPeriod;\nfloat t = mod(randomizedTime, animationPeriod);\nfloat fUnclamped = (t - t0) / (t1 - t0);\nfloat f = clamp(fUnclamped, 0.0, 1.0);\nfloat clampedTime = mix(t0, t1, f);\nfloat speed = mix(speed0, speed1, f);\nvec2 extrude;\nvec2 position;\nfloat fadeOpacity;\nfloat introOpacity;\nif (type == 2.0) {\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nvec2 ortho = mix(e0, e1, f);\nvec2 parallel;\nparallel = normalize(position1 - position0) * 0.5;\nif (id == 1.0) {\nextrude = ortho;\nv_texcoord = vec2(0.5, 0.0);\n} else if (id == 2.0) {\nextrude = -ortho;\nv_texcoord = vec2(0.5, 1.0);\n} else if (id == 3.0) {\nextrude = ortho + parallel;\nv_texcoord = vec2(1.0, 0.0);\n} else if (id == 4.0) {\nextrude = -ortho + parallel;\nv_texcoord = vec2(1.0, 1.0);\n}\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else {\nif (fUnclamped < 0.0) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nif (id == 1.0) {\nextrude = e0;\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 2.0) {\nextrude = -e0;\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 3.0) {\nextrude = mix(e0, e1, f);\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else if (id == 4.0) {\nextrude = -mix(e0, e1, f);\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n}\n}\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_color.a *= fadeOpacity;\nv_color.a *= mix(1.0, introOpacity, u_introFade);\nv_color.rgb *= v_color.a;\n}"},streamlines:{"streamlines.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_size;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/getFragmentColor.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\n}","streamlines.vert":"attribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_side;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nvoid main(void) {\nvec4 lineColor = getColor(a_speed);\nfloat lineOpacity = getOpacity(a_speed);\nfloat lineSize = getSize(a_speed);\nvec2 position = a_positionAndSide.xy;\nv_side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_color = lineColor;\nv_color.a *= lineOpacity;\nv_color.rgb *= v_color.a;\nv_size = lineSize;\n}"},"vv.glsl":"#define MAX_STOPS 8\n#ifdef VV_COLOR\nuniform float u_color_stops[MAX_STOPS];\nuniform vec4 u_color_values[MAX_STOPS];\nuniform int u_color_count;\n#else\nuniform vec4 u_color;\n#endif\n#ifdef VV_OPACITY\nuniform float u_opacity_stops[MAX_STOPS];\nuniform float u_opacity_values[MAX_STOPS];\nuniform int u_opacity_count;\n#else\nuniform float u_opacity;\n#endif\n#ifdef VV_SIZE\nuniform float u_size_stops[MAX_STOPS];\nuniform float u_size_values[MAX_STOPS];\nuniform int u_size_count;\n#else\nuniform float u_size;\n#endif\nuniform float u_featheringOffset;\nvec4 getColor(float x) {\n#ifdef VV_COLOR\nvec4 color = u_color_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_color_count) {\nbreak;\n}\nfloat x1 = u_color_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_color_stops[i];\nvec4 y2 = u_color_values[i];\nif (x < x2) {\nvec4 y1 = u_color_values[i - 1];\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\ncolor = y2;\n}\n}\n}\n#else\nvec4 color = u_color;\n#endif\nreturn color;\n}\nfloat getOpacity(float x) {\n#ifdef VV_OPACITY\nfloat opacity = u_opacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_opacity_count) {\nbreak;\n}\nfloat x1 = u_opacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_opacity_stops[i];\nfloat y2 = u_opacity_values[i];\nif (x < x2) {\nfloat y1 = u_opacity_values[i - 1];\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nopacity = y2;\n}\n}\n}\n#else\nfloat opacity = u_opacity;\n#endif\nreturn opacity;\n}\nfloat getSize(float x) {\n#ifdef VV_SIZE\nfloat size = u_size_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_size_count) {\nbreak;\n}\nfloat x1 = u_size_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_size_stops[i];\nfloat y2 = u_size_values[i];\nif (x < x2) {\nfloat y1 = u_size_values[i - 1];\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nsize = y2;\n}\n}\n}\n#else\nfloat size = u_size;\n#endif\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\nif (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\nreturn 0.0;\n}\nelse {\nreturn e;\n}\n}\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec2 axy = vec2(-1.0, -1.0);\nvec2 bxy = vec2(0.0, -1.0);\nvec2 cxy = vec2(1.0, -1.0);\nvec2 dxy = vec2(-1.0, 0.0);\nvec2 fxy = vec2(1.0, 0.0);\nvec2 gxy = vec2(-1.0, 1.0);\nvec2 hxy = vec2(0.0, 1.0);\nvec2 ixy = vec2(1.0, 1.0);\nvec2 onePixel = 1.0 / u_srcImageSize;\nif (pixelLocation.s < onePixel.s) {\naxy[0] = 1.0;\ndxy[0] = 1.0;\ngxy[0] = 1.0;\n}\nif (pixelLocation.t < onePixel.t) {\naxy[1] = 1.0;\nbxy[1] = 1.0;\ncxy[1] = 1.0;\n}\nif (pixelLocation.s > 1.0 - onePixel.s) {\ncxy[0] = -1.0;\nfxy[0] = -1.0;\nixy[0] = -1.0;\n}\nif (pixelLocation.t > 1.0 - onePixel.t) {\ngxy[1] = -1.0;\nhxy[1] = -1.0;\nixy[1] = -1.0;\n}\nvec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\nvec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\nvec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\nvec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\nvec4 ve = texture2D(u_image, pixelLocation);\nvec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\nvec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\nvec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\nvec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\nfloat dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\nfloat dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\nfloat alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nuniform mat3 u_worldExtent;\nvoid main() {\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"atan2.glsl":"float atan2(in float y, in float x) {\nfloat t0, t1, t2, t3, t4;\nt3 = abs(x);\nt1 = abs(y);\nt0 = max(t3, t1);\nt1 = min(t3, t1);\nt3 = 1.0 / t0;\nt3 = t1 * t3;\nt4 = t3 * t3;\nt0 =         - 0.013480470;\nt0 = t0 * t4 + 0.057477314;\nt0 = t0 * t4 - 0.121239071;\nt0 = t0 * t4 + 0.195635925;\nt0 = t0 * t4 - 0.332994597;\nt0 = t0 * t4 + 0.999995630;\nt3 = t0 * t3;\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\nt3 = y < 0.0 ? -t3 : t3;\nreturn t3;\n}","encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}},ce=new(m(7423).B)(function I(t){let K=oe;return t.split("/").forEach(j=>{K&&(K=K[j])}),K});function te(t){return ce.resolveIncludes(t)}},38982:(he,ne,m)=>{m.d(ne,{Br:()=>j,Fm:()=>A,N9:()=>ae,RA:()=>N,Tc:()=>z,Ue:()=>le,iC:()=>w,s9:()=>t,v:()=>E,xW:()=>de,zS:()=>se});var oe=m(99770),y=m(57596),I=m(67969),te=(m(85775),m(55086));function t(x,M,F="nearest",R=!1){var Ie;const B=!(R&&"u8"===M.pixelType),me=B?I.Br.FLOAT:I.Br.UNSIGNED_BYTE,ve=null==M.pixels||0===M.pixels.length?null:B?M.getAsRGBAFloat():M.getAsRGBA(),xe=null==(Ie=x.capabilities.textureFloat)?void 0:Ie.textureFloatLinear;return new te.x(x,{width:M.width,height:M.height,target:I.No.TEXTURE_2D,pixelFormat:I.VI.RGBA,internalFormat:x.type===y.zO.WEBGL2&&B?I.lP.RGBA32F:I.VI.RGBA,samplingMode:!xe||"bilinear"!==F&&"cubic"!==F?I.cw.NEAREST:I.cw.LINEAR,dataType:me,wrapMode:I.e8.CLAMP_TO_EDGE,flipped:!1},ve)}function j(x,M){const{spacing:F,offsets:R,coefficients:B,size:[me,ve]}=M,xe=F[0]>1,Ae={width:xe?4*me:me,height:ve,target:I.No.TEXTURE_2D,pixelFormat:I.VI.RGBA,internalFormat:x.type===y.zO.WEBGL2?I.lP.RGBA32F:I.VI.RGBA,dataType:I.Br.FLOAT,samplingMode:I.cw.NEAREST,wrapMode:I.e8.CLAMP_TO_EDGE,flipped:!1},Ie=new Float32Array(xe?me*ve*16:2*R.length);if(xe)for(let ge=0,b=0;ge<B.length;ge++)Ie[b++]=B[ge],ge%3==2&&(Ie[b++]=1);else for(let ge=0;ge<ve;ge++)for(let b=0;b<me;b++){const O=4*(ge*me+b),X=2*(b*ve+ge);Ie[O]=R[X],Ie[O+1]=R[X+1],Ie[O+3]=-1===R[X]?0:1}return new te.x(x,Ae,Ie)}function w(x,M){return new te.x(x,{width:M.length/4,height:1,target:I.No.TEXTURE_2D,pixelFormat:I.VI.RGBA,internalFormat:I.VI.RGBA,dataType:I.Br.UNSIGNED_BYTE,samplingMode:I.cw.NEAREST,wrapMode:I.e8.CLAMP_TO_EDGE,flipped:!1},M)}function z(x,M,F,R=1,B=!0){return{u_flipY:B,u_applyTransform:!!x,u_opacity:R,u_transformSpacing:x?x.spacing:oe.Z,u_transformGridSize:x?x.size:oe.Z,u_targetImageSize:M,u_srcImageSize:F}}function le(x,M){return{u_colormapOffset:M||0,u_colormapMaxIndex:x?x.length/4-1:0}}function se(x,M){return{u_scale:x,u_offset:M}}function de(x){return{u_bandCount:x.bandCount,u_minOutput:x.outMin,u_maxOutput:x.outMax,u_minCutOff:x.minCutOff,u_maxCutOff:x.maxCutOff,u_factor:x.factor,u_useGamma:x.useGamma,u_gamma:x.gamma,u_gammaCorrection:x.gammaCorrection}}function A(x){return{u_hillshadeType:x.hillshadeType,u_sinZcosAs:x.sinZcosAs,u_sinZsinAs:x.sinZsinAs,u_cosZs:x.cosZs,u_weights:x.weights,u_factor:x.factor,u_minValue:x.minValue,u_maxValue:x.maxValue}}function E(x,M){const F=x.gl,R=M.glName,B=F.getProgramParameter(R,F.ACTIVE_UNIFORMS),me=new Map;let ve;for(let xe=0;xe<B;xe++)ve=F.getActiveUniform(R,xe),ve&&me.set(ve.name,{location:F.getUniformLocation(R,ve.name),info:ve});return me}function ae(x,M,F){Object.keys(F).forEach(R=>{const B=M.get(R)||M.get(R+"[0]");B&&function H(x,M,F,R){if(null===R||null==F)return!1;const{info:B}=R;switch(B.type){case I.Se.FLOAT:B.size>1?x.setUniform1fv(M,F):x.setUniform1f(M,F);break;case I.Se.FLOAT_VEC2:x.setUniform2fv(M,F);break;case I.Se.FLOAT_VEC3:x.setUniform3fv(M,F);break;case I.Se.FLOAT_VEC4:x.setUniform4fv(M,F);break;case I.Se.FLOAT_MAT3:x.setUniformMatrix3fv(M,F);break;case I.Se.FLOAT_MAT4:x.setUniformMatrix4fv(M,F);break;case I.Se.INT:B.size>1?x.setUniform1iv(M,F):x.setUniform1i(M,F);break;case I.Se.BOOL:x.setUniform1i(M,F?1:0);break;case I.Se.INT_VEC2:case I.Se.BOOL_VEC2:x.setUniform2iv(M,F);break;case I.Se.INT_VEC3:case I.Se.BOOL_VEC3:x.setUniform3iv(M,F);break;case I.Se.INT_VEC4:case I.Se.BOOL_VEC4:x.setUniform4iv(M,F);break;default:return!1}}(x,R,F[R],B)})}function N(x,M,F,R){F.length===R.length&&(R.some(B=>null==B)||F.some(B=>null==B)||F.forEach((B,me)=>{M.setUniform1i(B,me),x.bindTexture(R[me],me)}))}}}]);